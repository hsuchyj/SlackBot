{"version":3,"sources":["../src/Bot.ts"],"names":[],"mappings":"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","file":"Bot.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { RootDialog } from \"./dialogs/RootDialog\";\nimport { SetLocaleFromTeamsSetting } from \"./middleware/SetLocaleFromTeamsSetting\";\nimport { StripBotAtMentions } from \"./middleware/StripBotAtMentions\";\nimport { RestrictIncomingMessagesToTenants } from \"./middleware/RestrictIncomingMessagesToTenants\";\nimport { LoadBotChannelData } from \"./middleware/LoadBotChannelData\";\nimport { SimulateResetBotChat } from \"./middleware/SimulateResetBotChat\";\nimport { Strings } from \"./locale/locale\";\nimport { loadSessionAsync } from \"./utils/DialogUtils\";\nimport * as teams from \"botbuilder-teams\";\nimport { ComposeExtensionHandlers } from \"./composeExtension/ComposeExtensionHandlers\";\n\n// =========================================================\n// Bot Setup\n// =========================================================\n\nexport class Bot extends builder.UniversalBot {\n\n    constructor(\n        private _connector: teams.TeamsChatConnector,\n        private botSettings: any,\n    ) {\n        super(_connector, botSettings);\n        this.set(\"persistConversationData\", true);\n\n        // Root dialog\n        new RootDialog(this).createChildDialogs();\n\n        // Add middleware\n        this.use(\n            // currently this middleware cannot be used because there is an error using it\n            // with updating messages examples\n            // builder.Middleware.sendTyping(),\n\n            // set on \"receive\" of message\n            new SetLocaleFromTeamsSetting(),\n\n            // set on \"botbuilder\" (after session created)\n            new SimulateResetBotChat(this),             // We recommend having this only in non-prod environments, for testing your 1:1 first-run experience\n            new StripBotAtMentions(),\n            new RestrictIncomingMessagesToTenants(),\n            new LoadBotChannelData(this.get(\"channelStorage\")),\n        );\n\n        // setup invoke payload handler\n        this._connector.onInvoke(this.getInvokeHandler(this));\n\n        // setup O365ConnectorCard action handler\n        this._connector.onO365ConnectorCardAction(this.getO365ConnectorCardActionHandler(this));\n\n        // setup conversation update handler for things such as a memberAdded event\n        this.on(\"conversationUpdate\", this.getConversationUpdateHandler(this));\n\n        // setup message reaction handler for like and remove like message\n        this.on(\"messageReaction\", (event: builder.IMessageUpdate) => {\n            this.handleMessageReaction(event);\n        });\n\n        // setup popup signin incoming request\n        this._connector.onSigninStateVerification((event, query, callback) => {\n            this.verifySigninState(event, query, callback);\n        });\n\n        // setup compose extension handlers\n        // onQuery is for events that come through the compose extension itself including\n        // config and auth responses from popups that were started in the compose extension\n        // onQuerySettingsUrl is only used when the user selects \"Settings\" from the three dot option\n        // next to the compose extension's name on the list of compose extensions\n        // onSettingsUpdate is only used for the response from the popup created by the\n        // onQuerySettingsUrl event\n        this._connector.onQuery(\"search123\", ComposeExtensionHandlers.getOnQueryHandler(this));\n        this._connector.onQuerySettingsUrl(ComposeExtensionHandlers.getOnQuerySettingsUrlHandler());\n        this._connector.onSettingsUpdate(ComposeExtensionHandlers.getOnSettingsUpdateHandler(this));\n    }\n\n    // Handle incoming invoke\n    private getInvokeHandler(bot: builder.UniversalBot): (event: builder.IEvent, callback: (err: Error, body: any, status?: number) => void) => void {\n        return async function (\n            event: builder.IEvent,\n            callback: (err: Error, body: any, status?: number) => void,\n        ): Promise<void>\n        {\n            let session = await loadSessionAsync(bot, event);\n            if (session) {\n                // Clear the stack on invoke, as many builtin dialogs don't play well with invoke\n                // Invoke messages should carry the necessary information to perform their action\n                session.clearDialogStack();\n\n                let payload = (event as any).value;\n\n                // Invokes don't participate in middleware\n                // If payload has an address, then it is from a button to update a message so we do not what to send typing\n                if (!payload.address) {\n                    session.sendTyping();\n                }\n\n                if (payload && payload.dialog) {\n                    session.beginDialog(payload.dialog, payload);\n                }\n            }\n            callback(null, \"\", 200);\n        };\n    }\n\n    // set incoming event to any because membersAdded is not a field in builder.IEvent\n    private getConversationUpdateHandler(bot: builder.UniversalBot): (event: builder.IConversationUpdate) => void {\n        return async function(event: builder.IConversationUpdate): Promise<void> {\n            // For sending a welcome message, we are only interested in member add events\n            if (!event.membersAdded || (event.membersAdded.length === 0)) {\n                return;\n            }\n\n            let session = await loadSessionAsync(bot, event);\n\n            // Determine if the bot was added to the conversation\n            let botId = event.address.bot.id;\n            let botWasAdded = event.membersAdded && event.membersAdded.find(member => (member.id === botId));\n\n            if (!event.address.conversation.isGroup) {\n                // 1:1 conversation event\n                // If the user hasn't received a first-run message YET, send a message to the user,\n                // introducing your bot and what it can do. Do NOT send this blindly, as you can receive\n                // spurious conversationUpdate events, especially if you use proactive messaging.\n\n                if (botWasAdded) {\n                    if (!session.userData.freSent) {\n                        session.userData.freSent = true;\n                        session.send(Strings.bot_introduction);\n                    } else {\n                        // First-run message has already been sent, so skip sending it again\n                        // Do not remove the check for \"freSent\" above. Your bot can receive spurious conversationUpdate\n                        // activities from chat service, so if you always respond to all of them, you will send random\n                        // welcome messages to users who have already received the welcome.\n                    }\n                }\n            } else {\n                // Not 1:1 event (bot or user was added to a team or group chat)\n\n                if (botWasAdded) {\n                    // Bot was added to the team\n                    // Send a message to the team's channel, introducing your bot and what you can do\n                    session.send(Strings.bot_introduction);\n                } else {\n                    // Other users were added to the team\n                }\n            }\n        };\n    }\n\n    // handler for handling incoming payloads from O365ConnectorCard actions\n    private getO365ConnectorCardActionHandler(bot: builder.UniversalBot): (event: builder.IEvent, query: teams.IO365ConnectorCardActionQuery, callback: (err: Error, result: any, statusCode: number) => void) => void {\n        return async function (event: builder.IEvent, query: teams.IO365ConnectorCardActionQuery, callback: (err: Error, result: any, statusCode: number) => void): Promise<void> {\n            let session = await loadSessionAsync(bot, event);\n\n            let userName = event.address.user.name;\n            let body = JSON.parse(query.body);\n            let msg = new builder.Message(session)\n                .text(Strings.o365connectorcard_action_response, userName, query.actionId, JSON.stringify(body, null, 2));\n\n            session.send(msg);\n  \n            callback(null, null, 200);\n        };\n    }\n\n    // method for handling incoming payloads from message reactions\n    private async handleMessageReaction(event: builder.IMessageUpdate): Promise<void>\n    {\n        let session = await loadSessionAsync(this, event);\n        if (event.reactionsAdded && event.reactionsAdded[0].type === \"like\") {\n            session.send(Strings.like_message);\n            //console.log(\"chicken\");\n        }\n\n        if (event.reactionsRemoved && event.reactionsRemoved[0].type === \"like\") {\n            session.send(Strings.remove_like_message);\n        }\n    }\n\n    // method for handling incoming payloads from popup signin\n    private async verifySigninState (event: builder.IEvent, query: teams.ISigninStateVerificationQuery, callback: (err: Error, body: any, status?: number) => void): Promise<void>\n    {\n        let session = await loadSessionAsync(this, event);\n\n        if (session)\n        {\n            let magicNumber = query.state;\n\n            session.clearDialogStack();\n            session.send(session.gettext(Strings.popupsignin_successful, magicNumber));\n        }\n        callback(null, \"\", 200);\n    }\n}\n"],"sourceRoot":"/app/build"}