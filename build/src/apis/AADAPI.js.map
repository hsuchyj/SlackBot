{"version":3,"sources":["../src/apis/AADAPI.ts"],"names":[],"mappings":"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","file":"AADAPI.js","sourcesContent":["import { AADRequestAPI } from \"./AADRequestAPI\";\nimport * as querystring from \"querystring\";\nimport * as config from \"config\";\nimport * as jwt from \"jsonwebtoken\";\n\n// tslint:disable-next-line:variable-name\nexport interface ValidatedAADInformation {\n    objectId: string;\n}\n\nexport class AADAPI {\n\n    private requestAPI: AADRequestAPI;\n\n    constructor () {\n        this.requestAPI = new AADRequestAPI();\n    }\n\n    public async getLoginURL(validationNumber: string): Promise<string> {\n        let aadRequestAPI = new AADRequestAPI();\n        let aadAuthorizationInfo = await aadRequestAPI.getAsync(\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\", {}, {});\n        aadAuthorizationInfo = JSON.parse(aadAuthorizationInfo);\n        // console.log(JSON.stringify(aadAuthorizationInfo));\n\n        let clientId = config.get(\"bot.botId\");\n        // let clientSecret = config.get(\"bot.botPassword\");\n        // let authorityHostUrl = \"https://login.windows.net\";\n        // let tenant = \"####\";\n        // let authorityUrl = authorityHostUrl + \"/\" + tenant;\n        let redirectUri = config.get(\"app.baseUri\") + \"/api/success\";\n        // let templateAuthzUrl = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/authorize?response_type=code&client_id=\" + clientId + \"&redirect_uri=\" + redirectUri + \"&state=<state>&scope=openid%20profile\";\n        let queryParams = {\n            response_type: \"code\",\n            client_id: clientId,\n            redirect_uri: redirectUri,\n            state: validationNumber,\n            scope: \"openid profile\",\n        };\n        // \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?\"\n        let authorizationUrl = aadAuthorizationInfo.authorization_endpoint + \"?\" + querystring.stringify(queryParams);\n\n        // let createAuthorizationUrl = (state) => {\n        //     return templateAuthzUrl.replace(\"<state>\", state);\n        // };\n\n        // let authorizationUrl = createAuthorizationUrl(validationNumber);\n        return authorizationUrl;\n    }\n\n    /**\n     * This method returns an object with a validated AAD object_id, token, and refresh token.\n     */\n    public async getValidatedAADInformation(code: string): Promise<ValidatedAADInformation> {\n        let aadRequestAPI = new AADRequestAPI();\n        let aadAuthorizationInfo = await aadRequestAPI.getAsync(\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\", {}, {});\n        aadAuthorizationInfo = JSON.parse(aadAuthorizationInfo);\n        // console.log(JSON.stringify(aadAuthorizationInfo));\n        let keysObject = await aadRequestAPI.getAsync(aadAuthorizationInfo.jwks_uri, {}, {});\n        let keys = JSON.parse(keysObject).keys;\n\n        let headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        };\n\n        let clientId = config.get(\"bot.botId\");\n        let clientSecret = config.get(\"bot.botPassword\");\n        // let authorityHostUrl = \"https://login.windows.net\";\n        // let tenant = \"####\";\n        // let authorityUrl = authorityHostUrl + \"/\" + tenant;\n        let redirectUri = config.get(\"app.baseUri\") + \"/api/success\";\n\n        let body = {\n            grant_type: \"authorization_code\",\n            client_id: clientId,\n            client_secret: clientSecret,\n            redirect_uri: redirectUri,\n            code: code,\n            scope: \"openid profile\",\n        };\n        // let postResultData = await new AADRequestAPI().postAsync(\"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/token\", args);\n        // let aadRequestAPI = new AADRequestAPI();\n        // let postResultData = await aadRequestAPI.postAsync(\"https://login.microsoftonline.com/common/oauth2/v2.0/token\", headers, body);\n        let tokens = await aadRequestAPI.postAsync(aadAuthorizationInfo.token_endpoint, headers, body);\n        tokens = JSON.parse(tokens);\n        // tokens = JSON.parse(tokens);\n        let validatedInfo = this.validateAADInformation(keys, aadAuthorizationInfo.issuer, tokens.id_token);\n        if (validatedInfo) {\n            return validatedInfo;\n        } else {\n            return null;\n        }\n    }\n\n    private validateAADInformation(keys: any, issuerTemplateUrl: string, idToken: string): any {\n        let claims = jwt.decode(idToken, { complete: true });\n        if (!claims) {\n            return false;\n        }\n\n        let type = claims[\"header\"].typ;\n        let algorithm = claims[\"header\"].alg;\n        let signingKeyId = claims[\"header\"].kid;\n        let tenantId = claims[\"payload\"].tid;\n\n        if (type !== \"JWT\") {\n            return false;\n        }\n\n        let issuer = issuerTemplateUrl.replace(\"{tenantid}\", tenantId);\n\n        let signingKey = keys.find((element) =>\n            {\n                return element.kid === signingKeyId;\n            },\n        );\n\n        if (!signingKey) {\n            return false;\n        }\n\n        let signingCerts = signingKey.x5c;\n        signingCerts = signingCerts.map(this.convertCertificateToBeOpenSSLCompatible);\n\n        for (let i = 0; i < signingCerts.length; i++) {\n            try {\n                let currSigningCert = signingCerts[i];\n            //   # jwt.verify verifies that the signature matches, the audience\n            //   #  is this app, the issuer is who we expected it to be, and that\n            //   #  the token is signed using the correct algorithm.\n                let decodedToken = jwt.verify(\n                    idToken,\n                    currSigningCert,\n                    {\n                        audience: config.get(\"bot.botId\"),\n                        algorithms: [ algorithm ],\n                        issuer: issuer,\n                    },\n                );\n\n            //   # return the user object.\n            //   return resolve(\n            //     id: decodedToken.oid,\n            //     displayName: decodedToken.name,\n            //     mail: decodedToken.preferred_username,\n            //     tokens: tokens\n            //   )\n                return decodedToken;\n            } catch (e) {\n                // do nothing\n                // return false;\n            }\n        }\n\n        return false;\n    }\n\n    private convertCertificateToBeOpenSSLCompatible(cert: string): string {\n        // let cert = \"####\";\n        // let finalCert = (cert) => {\n        let beginCert = \"-----BEGIN CERTIFICATE-----\";\n        let endCert = \"-----END CERTIFICATE-----\";\n        cert = cert.replace(\"\\n\", \"\");\n        cert = cert.replace(beginCert, \"\");\n        cert = cert.replace(endCert, \"\");\n        let result = beginCert;\n        while (cert.length > 0) {\n            if (cert.length > 64) {\n                result += \"\\n\" + cert.substring(0, 64);\n                cert = cert.substring(64, cert.length);\n            } else {\n                result += \"\\n\" + cert;\n                cert = \"\";\n            }\n        }\n        if (result[result.length ] !== \"\\n\") {\n            result += \"\\n\";\n        }\n        result += endCert + \"\\n\";\n\n        return result;\n    }\n}\n"],"sourceRoot":"/app/build"}