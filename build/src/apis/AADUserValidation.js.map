{"version":3,"sources":["../src/apis/AADUserValidation.ts"],"names":[],"mappings":"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","file":"AADUserValidation.js","sourcesContent":["import * as express from \"express\";\n// let fs = require(\"fs\");\n// let path = require(\"path\");\nimport * as builder from \"botbuilder\";\nimport * as config from \"config\";\n// import { AADRequestAPI } from \"./AADRequestAPI\";\nimport { MongoDbTempTokensStorage } from \"../storage/MongoDbTempTokensStorage\";\nimport { MongoDbAADObjectIdStorage } from \"../storage/MongoDbAADObjectIdStorage\";\nimport { AADAPI } from \"./AADAPI\";\nimport { isEmptyObj } from \"../utils/DialogUtils\";\n\nexport class AADUserValidation {\n    public static validateUser(bot: builder.UniversalBot): express.RequestHandler {\n        return async function (req: any, res: any, next: any): Promise<void> {\n            try {\n                let aadAPI = new AADAPI();\n                let authorizationUrl = await aadAPI.getLoginURL(req.query.validationNumb);\n                res.redirect(authorizationUrl);\n            } catch (e) {\n                // Don't log expected errors - error is probably from there not being example dialogs\n                res.send(`<html>\n                    <body>\n                    <p>\n                        Sorry - There has been an error.` +\n                        e.toString() +\n                    `</p>\n                    <br>\n                    <img src=\"/tab/error_generic.png\" alt=\"default image\" />\n                    </body>\n                    </html>`,\n                );\n            }\n        };\n    }\n\n    public static success(bot: builder.UniversalBot): express.RequestHandler {\n        return async function (req: any, res: any, next: any): Promise<void> {\n            try {\n                    // return result\n                // }\n\n                // .post('grant_type=authorization_code&client_id=' + clientId + '&client_secret=' + clientSecret + '&redirect_uri=' + redirectUri + '&code=' + req.query.code + '&scope=User.Read%20Group.ReadWrite.All%20User.ReadWrite.All%20offline_access')((err, resp, body) =>\n                // .post()((err, resp, body) =>\n                //     @robot.logger.debug \"#{LogPrefix} client err='#{err}'\"\n                //     @robot.logger.debug \"#{LogPrefix} client resp='#{resp}'\"\n                //     @robot.logger.debug \"#{LogPrefix} client body='#{body}'\"\n                //     data = JSON.parse(body)\n                //     @robot.logger.debug \"#{LogPrefix} client data='#{data}'\"\n                //     res.send(data)\n                // );\n\n                // let tempTokensStorage = new MongoDbTempTokensStorage(\"temp-tokens-test\", config.get(\"mongoDb.connectionString\"));\n                let tempTokensDbConnection = await MongoDbTempTokensStorage.createConnection();\n                // make this call something we can await?\n                let tempTokensEntry = await tempTokensDbConnection.getTempTokensAsync(req.query.state);\n\n                await tempTokensDbConnection.deleteTempTokensAsync(req.query.state);\n\n                await tempTokensDbConnection.close();\n\n                let aadAPI = new AADAPI();\n                let validatedAADInfo = await aadAPI.getValidatedAADInformation(req.query.code);\n\n                let htmlPage = `\n                    <html>\n                    <head>\n                    </head>\n                    <body>\n                        <h1>You did it!!!</h1>\n                        <p>`;\n\n                htmlPage += \"Params: \" +\n                    JSON.stringify(req.params) +\n                    \"<br><br>Body: \" +\n                    JSON.stringify(req.body) +\n                    \"<br><br>Query: \" +\n                    JSON.stringify(req.query);\n\n                htmlPage += \"<br><br>validatedAADInfo: \" +\n                    JSON.stringify(validatedAADInfo);\n\n                htmlPage += \"<br><br>Cleaned Cert: \" +\n                    // result;\n                    null;\n\n                htmlPage += \"<br><br>Entry in DB:<br>\" +\n                    JSON.stringify(tempTokensEntry);\n\n                htmlPage += \"<br><br>Token:<br>\" +\n                    tempTokensEntry.token;\n\n                htmlPage += \"<br><br>RefreshToken:<br>\" +\n                    tempTokensEntry.refreshToken;\n\n                htmlPage += \"<br><br>AAD Object Id:<br>\" +\n                    (validatedAADInfo as any).oid;\n\n                // https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\n                // https://login.microsoftonline.com/####/v2.0/.well-known/openid-configuration\n\n                htmlPage += `\n                        </p>\n                        <a href=\"${ config.get(\"app.baseUri\") + \"/vstsAuthFlowEnd\" }\">Success</a>\n                    </body>\n                    </html>`;\n\n                let aadObjectId = (validatedAADInfo as any).oid;\n                let vstsToken = tempTokensEntry.token;\n                let vstsRefreshToken = tempTokensEntry.refreshToken;\n\n                let botStateDb = await MongoDbAADObjectIdStorage.createConnection();\n                let userData = await botStateDb.getEntryByAADObjectId(aadObjectId);\n\n                if (isEmptyObj(userData)) {\n                    botStateDb.saveTokensByAADObjectId(\n                        {\n                            aadObjectId: aadObjectId,\n                            vstsToken: vstsToken,\n                            vstsRefreshToken: vstsRefreshToken,\n                        },\n                    );\n                } else {\n                    let vstsAuth = {\n                        token: vstsToken,\n                        refreshToken: vstsRefreshToken,\n                    };\n                    userData.vstsAuth = vstsAuth;\n                    botStateDb.saveBotEntry(userData);\n                }\n\n                botStateDb.close();\n\n                res.send(htmlPage);\n            } catch (e) {\n                // Don't log expected errors - error is probably from there not being example dialogs\n                res.send(`<html>\n                    <body>\n                    <p>\n                        Sorry.  There has been an error.` +\n                        e.toString() +\n                    `</p>\n                    <br>\n                    <img src=\"/tab/error_generic.png\" alt=\"default image\" />\n                    </body>\n                    </html>`,\n                );\n            }\n        };\n    }\n}\n"],"sourceRoot":"/app/build"}