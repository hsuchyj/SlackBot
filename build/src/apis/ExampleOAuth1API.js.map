{"version":3,"sources":["../src/apis/ExampleOAuth1API.ts"],"names":[],"mappings":"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","file":"ExampleOAuth1API.js","sourcesContent":["import * as request from \"request\";\nimport * as querystring from \"querystring\";\nimport * as config from \"config\";\nlet http = require(\"http\");\n\nconst apiBaseUri = \"https://api.Template.com\";\n\n// Callback for HTTP requests\nexport interface RequestCallback {\n    (error: any, body?: any): void;\n}\n\n// API wrapper\nexport class ExampleOAuth1API {\n\n    // Creates a new request wrapper for a given API.\n    constructor() {\n        // do nothing in constructor\n    }\n\n    // Make a GET request to API.\n    // Syntax: .get(uri, [query], callback)\n    public get(uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"GET\", uri, argsOrCallback, callback);\n    };\n\n    public getAsync(uri: string, args: any = {}): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.get(uri, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a DELETE request to API.\n    // Syntax: .delete(uri, [query], callback)\n    public del(uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"DELETE\", uri, argsOrCallback, callback);\n    };\n\n    public delAsync(uri: string, args: any = {}): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.del(uri, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a POST request to API.\n    // Syntax: .post(uri, [query], callback)\n    public post(uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"POST\", uri, argsOrCallback, callback);\n    };\n\n    public postAsync(uri: string, args: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.post(uri, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a PUT request to API.\n    // Syntax: .put(uri, [query], callback)\n    public put(uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"PUT\", uri, argsOrCallback, callback);\n    };\n\n    public putAsync(uri: string, args: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.put(uri, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a request to API.\n    // Syntax: .request(method, uri, [query], callback)\n    private request(method: string, uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        let args: any;\n\n        if (callback) {\n            args = argsOrCallback;\n        } else {\n            callback = argsOrCallback;\n            args = {};\n        }\n\n        let url = apiBaseUri + (uri[0] === \"/\" ? \"\" : \"/\") + uri;\n\n        if (method === \"GET\" || method === \"DELETE\") {\n            url += \"?\" + querystring.stringify(this.parseQuery(uri, args));\n        }\n\n        let options: request.Options = {\n            url: url,\n            method: method,\n            oauth: {\n                consumer_key: config.get(\"externalApp.consumer_key\"),\n                consumer_secret: config.get(\"externalApp.consumer_secret\"),\n                token: config.get(\"externalAppUser.token\"),\n                token_secret: config.get(\"externalAppUser.token_secret\"),\n            },\n            json: true,\n        };\n\n        let requestCallback = function (err: any, response: any, body: any): void {\n            if (!err && response.statusCode >= 400) {\n                err = new Error(body);\n                err.statusCode = response.statusCode;\n                err.responseBody = body;\n                err.statusMessage = http.STATUS_CODES[response.statusCode];\n            }\n\n            callback(err, body);\n        };\n\n        switch (method.toLowerCase())\n        {\n            case \"get\":\n                request.get(options, requestCallback);\n                break;\n            case \"post\":\n                request.post(options, requestCallback);\n                break;\n            case \"put\":\n                request.put(options, requestCallback);\n                break;\n            case \"delete\":\n                request.delete(options, requestCallback);\n                break;\n        }\n    };\n\n    // Parse the query string parameters in the uri into the arguments\n    private parseQuery(uri: string, args: any): any {\n        if (uri.indexOf(\"?\") !== -1) {\n            let ref = querystring.parse(uri.split(\"?\")[1]);\n\n            for (let key in ref) {\n                let value = ref[key];\n                args[key] = value;\n            }\n        }\n\n        return args;\n    };\n}\n"],"sourceRoot":"/app/build"}