{"version":3,"sources":["../src/apis/VSTSRequestAPI.ts"],"names":[],"mappings":"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","file":"VSTSRequestAPI.js","sourcesContent":["import * as request from \"request\";\nimport * as builder from \"botbuilder\";\nlet http = require(\"http\");\nimport { VSTSTokenOAuth2API } from \"./VSTSTokenOAuth2API\";\nimport { DialogIds } from \"../utils/DialogIds\";\nimport { Strings } from \"../locale/locale\";\n\n// Callback for HTTP requests\nexport interface RequestCallback {\n    (error: any, body?: any): void;\n}\n\n// API wrapper\nexport class VSTSRequestAPI {\n\n    // Creates a new request wrapper for a given API.\n    constructor() {\n        // do nothing\n    }\n\n    private isUserValidated(session: builder.Session): boolean {\n        // let isValidated = session.userData &&\n        //     session.userData.vstsAuth &&\n        //     session.userData.vstsAuth.isValidated;\n        let isValidated = session.userData &&\n            session.userData.vstsAuth &&\n            session.userData.vstsAuth.token &&\n            session.userData.vstsAuth.refreshToken;\n\n        if (!isValidated) {\n            session.send(Strings.need_to_log_in);\n            session.beginDialog(DialogIds.VSTSLogInDialogId);\n        }\n\n        return isValidated;\n    }\n\n    private async getAccessToken(session: builder.Session): Promise<any> {\n        if (!this.isUserValidated(session)) {\n            return null;\n        }\n\n        let auth = new VSTSTokenOAuth2API();\n        // sets tokens in session.userData.vstsAuth.token and session.userData.vstsAuth.refreshToken\n        await auth.refreshTokens(session);\n\n        session.sendTyping();\n\n        let args = { vsts_access_token: session.userData.vstsAuth.token };\n\n        return args;\n    };\n\n    // Make a GET request to API.\n    // Syntax: .get(uri, [query], callback)\n    private get(url: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"GET\", url, argsOrCallback, callback);\n    };\n\n    // tslint:disable-next-line:member-ordering\n    public async getAsync(url: string, session: builder.Session): Promise<any> {\n        let args = await this.getAccessToken(session);\n        if (!args) {\n            return null;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.get(url, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a DELETE request to API.\n    // Syntax: .delete(uri, [query], callback)\n    private del(url: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"DELETE\", url, argsOrCallback, callback);\n    };\n\n    // tslint:disable-next-line:member-ordering\n    public async delAsync(url: string, session: builder.Session): Promise<any> {\n        let args = await this.getAccessToken(session);\n        if (!args) {\n            return null;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.del(url, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a POST request to API.\n    // Syntax: .post(uri, [query], callback)\n    private post(url: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"POST\", url, argsOrCallback, callback);\n    };\n\n    // tslint:disable-next-line:member-ordering\n    public async postAsync(url: string, session: builder.Session): Promise<any> {\n        let args = await this.getAccessToken(session);\n        if (!args) {\n            return null;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.post(url, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a PUT request to API.\n    // Syntax: .put(uri, [query], callback)\n    private put(url: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"PUT\", url, argsOrCallback, callback);\n    };\n\n    // tslint:disable-next-line:member-ordering\n    public async putAsync(url: string, session: builder.Session): Promise<any> {\n        let args = await this.getAccessToken(session);\n        if (!args) {\n            return null;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.put(url, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a request to API.\n    // Syntax: .request(method, uri, [query], callback)\n    private request(method: string, url: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        let args: any;\n\n        if (callback) {\n            args = argsOrCallback;\n        } else {\n            callback = argsOrCallback;\n            args = {};\n        }\n\n        let options: request.Options = {\n            url: url,\n            method: method,\n            headers: {\n                \"authorization\": \"bearer \" + args.vsts_access_token,\n            },\n        };\n\n        let requestCallback = function (err: any, response: any, body: any): void {\n            if (!err && response.statusCode >= 400) {\n                err = new Error(body);\n                err.statusCode = response.statusCode;\n                err.responseBody = body;\n                err.statusMessage = http.STATUS_CODES[response.statusCode];\n            }\n\n            callback(err, body);\n        };\n\n        switch (method.toLowerCase())\n        {\n            case \"get\":\n                request.get(options, requestCallback);\n                break;\n            case \"post\":\n                request.post(options, requestCallback);\n                break;\n            case \"put\":\n                request.put(options, requestCallback);\n                break;\n            case \"delete\":\n                request.delete(options, requestCallback);\n                break;\n        }\n    };\n}\n"],"sourceRoot":"/app/build"}