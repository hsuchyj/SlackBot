{"version":3,"sources":["../src/apis/VSTSTokenOAuth2API.ts"],"names":[],"mappings":"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","file":"VSTSTokenOAuth2API.js","sourcesContent":["import * as request from \"request\";\nimport * as querystring from \"querystring\";\nimport * as config from \"config\";\nlet http = require(\"http\");\nimport * as express from \"express\";\nimport * as builder from \"botbuilder\";\n// import { loadSessionAsync } from \"../utils/DialogUtils\";\n// import { Strings } from \"../locale/locale\";\n// import { DialogIds } from \"../utils/DialogIds\";\nimport { MongoDbTempTokensStorage } from \"../storage/MongoDbTempTokensStorage\";\n\n// Callback for HTTP requests\nexport interface RequestCallback {\n    (error: any, body?: any): void;\n}\n\n// API wrapper\nexport class VSTSTokenOAuth2API {\n\n    public static getUserAuthorizationURL(): string {\n        let args = {\n            client_id: config.get(\"vstsApp.appId\"),\n            response_type: \"Assertion\",\n            state: \"\",\n            scope: \"vso.work\",\n            redirect_uri: config.get(\"app.baseUri\") + \"/api/VSTSOauthCallback\",\n        };\n\n        let url = \"https://app.vssps.visualstudio.com/oauth2/authorize/?\" + querystring.stringify(args);\n        return url;\n    }\n\n    public static setUserAccessToken (bot: builder.UniversalBot): express.RequestHandler {\n        return async function (req: any, res: any, next: any): Promise<void> {\n            try {\n\n                let code = req.query.code;\n\n                let auth = new VSTSTokenOAuth2API();\n\n                // change to be more \"random\" and robust than this\n                let randomValidationNumber = Math.floor((Math.random() * 1000000) + 1);\n\n                await auth.tempSaveTokens(code, randomValidationNumber.toString());\n\n                // res.send(session.gettext(Strings.please_return_to_teams, randomValidationNumber));\n                res.redirect(config.get(\"app.baseUri\") + \"/api/validateUser?validationNumb=\" + randomValidationNumber);\n            } catch (e) {\n                // Don't log expected errors\n                res.send(`<html>\n                    <body>\n                    <p>\n                        Sorry.  There has been an error.` +\n                        e.toString() +\n                    `</p>\n                    <br>\n                    <img src=\"/tab/error_generic.png\" alt=\"default image\" />\n                    </body>\n                    </html>`,\n                );\n            }\n        };\n    }\n\n    constructor() {\n        // do nothing\n    }\n\n    public async tempSaveTokens(code: string, randomValidationNumber: string): Promise<void> {\n        let args = {\n            assertion: code,\n            tokenRequestType: \"get_token\",\n         };\n\n        let resp = await this.postAsync(\"\", args);\n\n        let body = JSON.parse(resp);\n\n        // session.userData.vstsAuth = {\n        //     token: body.access_token,\n        //     refreshToken: body.refresh_token,\n        //     isValidated: false,\n        //     randomValidationNumber: randomValidationNumber,\n        // };\n\n        let tempTokensEntry = {\n            _id: randomValidationNumber,\n            token: body.access_token,\n            refreshToken: body.refresh_token,\n        };\n\n        // let tempTokensStorage = new MongoDbTempTokensStorage(\"temp-tokens-test\", config.get(\"mongoDb.connectionString\"));\n        let tempTokensDbConnection = await MongoDbTempTokensStorage.createConnection();\n        // make this call something we can await?\n        await tempTokensDbConnection.saveTempTokensAsync(tempTokensEntry);\n        await tempTokensDbConnection.close();\n    }\n\n    public async refreshTokens(session: builder.Session): Promise<void> {\n        session.sendTyping();\n        let args = {\n            vsts_refresh_token: session.userData.vstsAuth.refreshToken,\n            tokenRequestType: \"refresh_token\",\n         };\n\n        let resp = await this.postAsync(\"\", args);\n\n        let body = JSON.parse(resp);\n\n        session.userData.vstsAuth.token = body.access_token;\n        session.userData.vstsAuth.refreshToken = body.refresh_token;\n\n        // used for debugging to let developer know tokens were refreshed\n        // session.send(Strings.tokens_refreshed_confirmation);\n\n        // try to save the tokens in case no other messages are sent\n        session.save().sendBatch();\n    }\n\n    // Make a POST request to API.\n    // Syntax: .post(uri, [query], callback)\n    public post(uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        this.request(\"POST\", uri, argsOrCallback, callback);\n    };\n\n    public postAsync(uri: string, args: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.post(uri, args, (err, result) => {\n                if (!err) {\n                    resolve(result);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    // Make a request to API.\n    // Syntax: .request(method, uri, [query], callback)\n    private request(method: string, uri: string, argsOrCallback?: any | RequestCallback, callback?: RequestCallback): void {\n        let args: any;\n\n        if (callback) {\n            args = argsOrCallback;\n        } else {\n            callback = argsOrCallback;\n            args = {};\n        }\n\n        let options: request.Options = {\n            url: \"https://app.vssps.visualstudio.com/oauth2/token\",\n            method: method,\n            headers: {\n                \"content-type\": \"application/x-www-form-urlencoded\",\n            },\n        };\n\n        if (args.tokenRequestType === \"get_token\") {\n            options.body = \"client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\" +\n                \"&client_assertion=\" + config.get(\"vstsApp.appSecret\") +\n                \"&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer\" +\n                \"&assertion=\" + args.assertion +\n                \"&redirect_uri=\" + config.get(\"app.baseUri\") + \"/api/VSTSOauthCallback\";\n\n        } else if (args.tokenRequestType === \"refresh_token\") {\n            options.body = \"client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer\" +\n                \"&client_assertion=\" + config.get(\"vstsApp.appSecret\") +\n                \"&grant_type=refresh_token\" +\n                \"&assertion=\" + args.vsts_refresh_token +\n                \"&redirect_uri=\" + config.get(\"app.baseUri\") + \"/api/VSTSOauthCallback\";\n        }\n\n        let requestCallback = function (err: any, response: any, body: any): void {\n            if (!err && response.statusCode >= 400) {\n                err = new Error(body);\n                err.statusCode = response.statusCode;\n                err.responseBody = body;\n                err.statusMessage = http.STATUS_CODES[response.statusCode];\n            }\n\n            callback(err, body);\n        };\n\n        request.post(options, requestCallback);\n    };\n}\n"],"sourceRoot":"/app/build"}