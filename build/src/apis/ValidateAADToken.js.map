{"version":3,"sources":["../src/apis/ValidateAADToken.ts"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,uBAAuB;AACvB,EAAE;AACF,eAAe;AACf,wEAAwE;AACxE,kEAAkE;AAClE,sEAAsE;AACtE,sEAAsE;AACtE,qEAAqE;AACrE,wEAAwE;AACxE,4BAA4B;AAC5B,EAAE;AACF,iEAAiE;AACjE,kEAAkE;AAClE,EAAE;AACF,oEAAoE;AACpE,qEAAqE;AACrE,wDAAwD;AACxD,yEAAyE;AACzE,yEAAyE;AACzE,wEAAwE;AACxE,kEAAkE;;AAGlE,oCAAoC;AACpC,iCAAiC;AACjC,4DAAyD;AAEzD,kFAAkF;AAClF;IAEW,MAAM,CAAC,MAAM;QAChB,IAAI,iBAAiB,GAAG,IAAI,+BAAc,CAAC,gFAAgF,CAAC,CAAC;QAC7H,OAAO,CAAC,GAAoB,EAAE,GAAqB,EAAE,EAAE;YACnD,mBAAmB;YACnB,IAAI,eAAe,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,eAAe,EAAE;gBAClB,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;gBACjD,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO;aACV;YAED,mCAAmC;YACnC,MAAM,YAAY,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YAClE,iBAAiB,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;gBACzD,IAAI,CAAC,GAAG,EAAE;oBACN,OAAO,CAAC,KAAK,CAAC,iDAAiD,CAAC,CAAC;oBACjE,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBACvB;gBAED,eAAe;gBACf,MAAM,aAAa,GAAsB;oBACrC,UAAU,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;oBACvC,MAAM,EAAE,2BAA2B,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,GAAG;oBACjE,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;oBACjC,cAAc,EAAE,GAAG;iBACtB,CAAC;gBACF,IAAI;oBACA,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE,GAAG,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;oBAC7D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC/B;gBAAC,OAAO,CAAC,EAAE;oBACR,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;oBACzC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBACvB;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;CAEJ;AAxCD,4CAwCC","file":"ValidateAADToken.js","sourcesContent":["// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport * as express from \"express\";\nimport * as jwt from \"jsonwebtoken\";\nimport * as config from \"config\";\nimport { OpenIdMetadata } from \"../utils/OpenIdMetadata\";\n\n// Validate the AAD token in the Authorization header and return the decoded token\nexport class ValidateAADToken {\n\n    public static listen(): express.RequestHandler {\n        let msaOpenIdMetadata = new OpenIdMetadata(\"https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration\");\n        return (req: express.Request, res: express.Response) => {\n            // Get bearer token\n            let authHeaderMatch = /^Bearer (.*)/i.exec(req.header(\"authorization\"));\n            if (!authHeaderMatch) {\n                console.error(\"No Authorization token provided\");\n                res.sendStatus(401);\n                return;\n            }\n\n            // Decode token and get signing key\n            const encodedToken = authHeaderMatch[1];\n            const decodedToken = jwt.decode(encodedToken, { complete: true });\n            msaOpenIdMetadata.getKey(decodedToken[\"header\"].kid, (key) => {\n                if (!key) {\n                    console.error(\"Invalid signing key or OpenId metadata document\");\n                    res.sendStatus(500);\n                }\n\n                // Verify token\n                const verifyOptions: jwt.VerifyOptions = {\n                    algorithms: [\"RS256\", \"RS384\", \"RS512\"],\n                    issuer: `https://sts.windows.net/${decodedToken[\"payload\"].tid}/`,\n                    audience: config.get(\"app.appId\"),\n                    clockTolerance: 300,\n                };\n                try {\n                    let token = jwt.verify(encodedToken, key.key, verifyOptions);\n                    res.status(200).send(token);\n                } catch (e) {\n                    console.error(\"Invalid bearer token\", e);\n                    res.sendStatus(401);\n                }\n            });\n        };\n    }\n\n}\n"],"sourceRoot":"/app/build"}