{"version":3,"sources":["../src/composeExtension/ComposeExtensionHandlers.ts"],"names":[],"mappings":"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","file":"ComposeExtensionHandlers.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport * as teams from \"botbuilder-teams\";\nimport * as request from \"request\";\nimport { loadSessionAsync } from \"../utils/DialogUtils\";\nimport * as config from \"config\";\nimport { Strings } from \"../locale/locale\";\n\nconst searchApiUrlFormat = \"https://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=[keyword]&srlimit=[limit]&sroffset=[offset]&format=json\";\nconst imageApiUrlFormat = \"https://en.wikipedia.org/w/api.php?action=query&formatversion=2&format=json&prop=pageimages&piprop=thumbnail&pithumbsize=250&titles=[title]\";\n\nexport class ComposeExtensionHandlers {\n\n    // this function returns a handler that will handle all interactions with the compose extension\n    // in the compose extension search flyout\n    public static getOnQueryHandler(bot: builder.UniversalBot): (event: builder.IEvent, query: teams.ComposeExtensionQuery, callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void) => void {\n        return async function (\n            event: builder.IEvent,\n            query: teams.ComposeExtensionQuery,\n            callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void,\n        ): Promise<void>\n        {\n            // get the parameters that were passed into the compose extension\n            let manifestInitialRun = \"initialRun\";\n            let manifestParameterName = \"query\";\n            let initialRunParameter = getQueryParameterByName(query, manifestInitialRun);\n            // NOTE: make sure to not enter special characters that would break a regular expression\n            // due to the logic that is used later\n            let queryParameter = getQueryParameterByName(query, manifestParameterName);\n\n            // validate that one of the two expected inputs was given\n            if (!initialRunParameter && !queryParameter) {\n                callback(new Error(\"Parameter mismatch in manifest\"), null, 500);\n                return;\n            }\n\n            let session = await loadSessionAsync(bot, event);\n\n            if (!session.userData) {\n                let response = teams.ComposeExtensionResponse.message()\n                    .text(\"ERROR: No user data\")\n                    .toResponse();\n                callback(null, response, 200);\n                return;\n            }\n\n            /**\n             * Below are the checks for various states that may occur\n             * Note that the order of many of these blocks of code do matter\n             */\n\n            // situation where the incoming payload was received from the config popup\n            if (query.state) {\n                parseSettingsAndSave(query.state, session);\n\n                // need to keep going to return a response so do not return here\n\n                // these variables are changed so if the word 'setting' kicked off the compose extension,\n                // then the word setting will not retrigger the config experience\n                queryParameter = \"\";\n                initialRunParameter = \"true\";\n            }\n\n            // this is a sitaution where the user's preferences have not been set up yet\n            if (!session.userData.composeExtensionCardType) {\n                let configResponse = getConfigResponse();\n                callback(null, configResponse, 200);\n                return;\n            }\n\n            // this is the situation where the user has entered the word 'reset' and wants\n            // to clear his/her settings\n            // resetKeyword for English is \"reset\"\n            let resetKeyword = session.gettext(Strings.compose_extension_reset_keyword);\n            if (queryParameter.toLowerCase() === resetKeyword.toLowerCase()) {\n                delete session.userData.composeExtensionCardType;\n                // this line is used to save the state for later use by the compose extension\n                session.save().sendBatch();\n\n                let resetResponse = teams.ComposeExtensionResponse.message()\n                    .text(session.gettext(Strings.compose_extension_reset_message))\n                    .toResponse();\n                callback(null, resetResponse, 200);\n                return;\n            }\n\n            // this is the situation where the user has entered \"setting\" or \"settings\" in order\n            // to repromt the config experience\n            // keywords for English are \"setting\" and \"settings\"\n            let settingKeyword = session.gettext(Strings.compose_extension_setting_keyword);\n            let settingsKeyword = session.gettext(Strings.compose_extension_settings_keyword);\n            if (\n                queryParameter.toLowerCase() === settingKeyword.toLowerCase() ||\n                queryParameter.toLowerCase() === settingsKeyword.toLowerCase()\n            )\n            {\n                let configResponse = getConfigResponse();\n                callback(null, configResponse, 200);\n                return;\n            }\n\n            // this is the situation where the user in on the initial run of the compose extension\n            // e.g. when the user first goes to the compose extension and the search bar is still blank\n            // in order to get the compose extension to run the initial run, the setting \"initialRun\": true\n            // must be set in the manifest for the compose extension\n            if (initialRunParameter) {\n                let directionsResponse = teams.ComposeExtensionResponse.message()\n                    .text(session.gettext(Strings.compose_extension_directions))\n                    .toResponse();\n                callback(null, directionsResponse, 200);\n                return;\n            }\n\n            /**\n             * Below here is simply the logic to call the Wikipedia API and create the response for\n             * a query; the general flow is to call the Wikipedia API for the query and then call the\n             * Wikipedia API for each entry for the query to see if that entry has an image; in order\n             * to get the asynchronous sections handled, an array of Promises for cards is used; each\n             * Promise is resolved when it is discovered if an image exists for that entry; once all\n             * of the Promises are resolved, the response is sent back to Teams\n             */\n\n            let searchApiUrl = searchApiUrlFormat.replace(\"[keyword]\", queryParameter);\n            searchApiUrl = searchApiUrl.replace(\"[limit]\", query.queryOptions.count + \"\");\n            searchApiUrl = searchApiUrl.replace(\"[offset]\", query.queryOptions.skip + \"\");\n            searchApiUrl = encodeURI(searchApiUrl);\n\n            // call Wikipedia API to search\n            request(searchApiUrl, (error, res, body) => {\n                let wikiResults: any = JSON.parse(body).query.search;\n                let promisesOfCardsAsAttachments = new Array<Promise<teams.ComposeExtensionAttachment>>();\n\n                // enumerate search results and build Promises for cards for response\n                wikiResults.forEach((wikiResult) => {\n                    // a separate API call to Wikipedia is needed to fetch the page image, if it exists\n                    let imageApiUrl = imageApiUrlFormat.replace(\"[title]\", encodeURI(wikiResult.title));\n                    let cardPromise = new Promise<teams.ComposeExtensionAttachment>((resolve, reject) => {\n                        request(imageApiUrl, (error2, res2, body2) => {\n                            // parse image url\n                            if (!error2) {\n                                let imageUrl = null;\n                                let pages: [any] = JSON.parse(body2).query.pages;\n                                if (pages && pages.length > 0 && pages[0].thumbnail) {\n                                    imageUrl = pages[0].thumbnail.source;\n                                } else {\n                                    // no image so use default Wikipedia image\n                                    imageUrl = \"https://upload.wikimedia.org/wikipedia/commons/d/de/Wikipedia_Logo_1.0.png\";\n                                }\n\n                                // highlight matched keyword\n                                let highlightedTitle = wikiResult.title;\n                                if (queryParameter) {\n                                    let matches = highlightedTitle.match(new RegExp(queryParameter, \"gi\"));\n                                    if (matches && matches.length > 0) {\n                                        highlightedTitle = highlightedTitle.replace(new RegExp(queryParameter, \"gi\"), \"<b>\" + matches[0] + \"</b>\");\n                                    }\n                                }\n\n                                // make title into a link\n                                highlightedTitle = \"<a href=\\\"https://en.wikipedia.org/wiki/\" + encodeURI(wikiResult.title) + \"\\\" target=\\\"_blank\\\">\" + highlightedTitle + \"</a>\";\n\n                                let cardText = wikiResult.snippet + \" ...\";\n\n                                // create the card itself and the preview card based upon the information\n\n                                // HeroCard extends ThumbnailCard so we can use ThumbnailCard as the overarching type\n                                let card: builder.ThumbnailCard = null;\n                                // check user preference for which type of card to create\n                                if (session.userData.composeExtensionCardType === \"thumbnail\") {\n                                    card = new builder.ThumbnailCard();\n                                } else {\n                                    // at this point session.userData.composeExtensionCardType === \"hero\"\n                                    card = new builder.HeroCard();\n                                }\n                                card.title(highlightedTitle)\n                                    .text(cardText)\n                                    .images([new builder.CardImage().url(imageUrl)]);\n\n                                // build the preview card that will show in the search results\n                                // Note: this is only needed if you want the cards in the search results to look\n                                // different from what is placed in the compose box\n                                let previewCard = new builder.ThumbnailCard()\n                                    .title(highlightedTitle)\n                                    .text(cardText)\n                                    .images([new builder.CardImage().url(imageUrl)]);\n\n                                let cardAsAttachment: teams.ComposeExtensionAttachment = card.toAttachment();\n                                // add preview card to the response card\n                                cardAsAttachment.preview = previewCard.toAttachment();\n\n                                // resolve this Promise for a card once all of the information is in place\n                                resolve(cardAsAttachment);\n                            }\n                        });\n                    });\n\n                    promisesOfCardsAsAttachments.push(cardPromise);\n                });\n\n                // once all of the Promises for cards are resolved, then send the respone back to Teams\n                Promise.all(promisesOfCardsAsAttachments).then((cardsAsAttachments) =>\n                {\n                    let responseObject = teams.ComposeExtensionResponse.result(\"list\");\n                    let response = responseObject.attachments(cardsAsAttachments).toResponse();\n                    callback(null, response, 200);\n                });\n            });\n        };\n    }\n\n    /**\n     * The two functions below return handlers for interacting with the settings option located at\n     * the three dots when viewing the list of compose extensions\n     * Note: to get the settings option to show up for these three dots, \"canUpdateConfiguration\": true\n     * must be set in the manifest for the compose extension\n     */\n\n    // this function returns a handler which is used to return the config url to be opened in\n    // the settings popup\n    public static getOnQuerySettingsUrlHandler(): (event: builder.IEvent, query: teams.ComposeExtensionQuery, callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void) => void {\n        return async function (\n            event: builder.IEvent,\n            query: teams.ComposeExtensionQuery,\n            callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void,\n        ): Promise<void>\n        {\n            let configResponse = getConfigResponse();\n            callback(null, configResponse, 200);\n        };\n    }\n\n    // this function returns a handler which is used to accept the returned state when the settings popup\n    // initialized in the onQuerySettingsUrl handler (see above) is closed\n    public static getOnSettingsUpdateHandler(bot: builder.UniversalBot): (event: builder.IEvent, query: teams.ComposeExtensionQuery, callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void) => void {\n        return async function (\n            event: builder.IEvent,\n            query: teams.ComposeExtensionQuery,\n            callback: (err: Error, result: teams.IComposeExtensionResponse, statusCode: number) => void,\n        ): Promise<void>\n        {\n            let session = await loadSessionAsync(bot, event);\n            parseSettingsAndSave(query.state, session);\n            callback(null, null, 200);\n        };\n    }\n}\n\n// return the value of the specified query parameter\nfunction getQueryParameterByName(query: teams.ComposeExtensionQuery, name: string): string {\n    let matchingParams = (query.parameters || []).filter(p => p.name === name);\n    return matchingParams.length ? matchingParams[0].value : \"\";\n}\n\n// used to parse the user preferences from the state and save them for later use\nfunction parseSettingsAndSave(state: any, session: builder.Session): void {\n    // query.state is parsed because its value is a string of a JSON object\n    // this state is set in src/pages/ComposeExtensionSettingsPopUp.ts\n    let settingsState = JSON.parse(state);\n    if (settingsState.cardType) {\n        session.userData.composeExtensionCardType = settingsState.cardType;\n        // this line is used to save the state for later use by the compose extension\n        session.save().sendBatch();\n    }\n}\n\n// create a response to prompt for a configuration\nfunction getConfigResponse(): teams.IComposeExtensionResponse {\n    // the width and height parameters are optional, but will be used to try and create a popup of that size\n    // if that size popup cannot be created, as in this example, then Teams will create the largest allowed popup\n    let hardCodedUrl = config.get(\"app.baseUri\") + \"/composeExtensionSettings?width=5000&height=5000\";\n    let response = teams.ComposeExtensionResponse.config().actions([\n        builder.CardAction.openUrl(null, hardCodedUrl, \"Config\"),\n    ]).toResponse();\n    return response;\n}\n"],"sourceRoot":"/app/build"}