{"version":3,"sources":["../src/dialogs/examples/auth/VSTSAPICallDialog.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAsC;AACtC,4EAAyE;AACzE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AACjD,mDAAgD;AAEhD,uBAA+B,SAAQ,yCAAmB;IAE9C,MAAM,CAAO,mBAAmB,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAC1J,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAO,CAAC,uBAAuB,CAAC,CAAC;QACnE,CAAC;KAAA;IAEO,MAAM,CAAO,YAAY,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YACnJ,IAAI,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC7C,IAAI,OAAO,GAAG,IAAI,iBAAO,EAAE,CAAC;YAC5B,IAAI,IAAI,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;YACjE,IAAI,CAAC,IAAI,EAAE;gBACP,OAAO,CAAC,SAAS,EAAE,CAAC;gBACpB,mEAAmE;gBACnE,OAAO;aACV;YAED,oEAAoE;YACpE,mCAAmC;YACnC,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,2BAA2B,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;YACxF,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,oCAAoC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAE9E,IAAI,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACvF,IAAI,YAAY,GAAG,oCAAoC,GAAG,iBAAiB,GAAG,iBAAiB,GAAG,iBAAiB,GAAG,UAAU,CAAC;YACjI,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,wBAAwB,EAAE,YAAY,CAAC,CAAC;YAE7D,OAAO,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,mBAAmB,EAC7B,6BAAa,CAAC,sBAAsB,EACpC;YACI,iBAAiB,CAAC,mBAAmB;YACrC,iBAAiB,CAAC,YAAY;SACjC,CACJ,CAAC;IACN,CAAC;CACJ;AAxCD,8CAwCC","file":"VSTSAPICallDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport { VSTSAPI } from \"../../../apis/VSTSAPI\";\n\nexport class VSTSAPICallDialog extends TriggerActionDialog {\n\n    private static async promptForWorkItemId(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        builder.Prompts.text(session, Strings.prompt_for_work_item_id);\n    }\n\n    private static async showWorkItem(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        let desiredWorkItemId = args.response.trim();\n        let vstsAPI = new VSTSAPI();\n        let body = await vstsAPI.getWorkItem(desiredWorkItemId, session);\n        if (!body) {\n            session.endDialog();\n            // return is needed because endDialog does not quit out of function\n            return;\n        }\n\n        // session.send, when given a template, will substitute values where\n        // indicated in the string template\n        session.send(Strings.title_of_work_item_template, body.value[0].fields[\"System.Title\"]);\n        session.send(Strings.get_html_info_for_work_item_template, body.value[0].url);\n\n        let urlEncodedProject = encodeURIComponent(body.value[0].fields[\"System.TeamProject\"]);\n        let hardCodedUrl = \"https://teamsbot.visualstudio.com/\" + urlEncodedProject + \"/_workitems?id=\" + desiredWorkItemId + \"&_a=edit\";\n        session.send(Strings.go_to_work_item_template, hardCodedUrl);\n\n        session.endDialog();\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.VSTSAPICallDialogId,\n            DialogMatches.VSTSAPICallDialogMatch,\n            [\n                VSTSAPICallDialog.promptForWorkItemId,\n                VSTSAPICallDialog.showWorkItem,\n            ],\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}