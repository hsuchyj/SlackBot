{"version":3,"sources":["../src/dialogs/examples/basic/ThumbnailCardDialog.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAsC;AACtC,4EAAyE;AACzE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AACjD,iCAAiC;AAEjC,yBAAiC,SAAQ,yCAAmB;IAEhD,MAAM,CAAO,KAAK,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAC5I,IAAI,KAAK,GAAG,IAAI,KAAK,EAAyB,CAAC;YAC/C,IAAI,SAAS,GAAG,CAAC,CAAC;YAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAI,OAAO,GAAG,IAAI,KAAK,EAAsB,CAAC;gBAC9C;;;;;;;mBAOG;gBACH,kBAAkB;gBAClB,uBAAuB;gBACvB,6BAA6B;gBAC7B,IAAI;gBACJ,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;qBACvC,IAAI,CAAC,QAAQ,CAAC;qBACd,KAAK,CAAC,gBAAO,CAAC,0BAA0B,CAAC;qBACzC,KAAK,CAAC,GAAG;oBACN,gBAAgB,GAAG,qBAAS,CAAC,aAAa,GAAG,MAAM;oBACnD,iDAAiD;oBACrD,GAAG,CAAC,CACP,CAAC;gBAEF,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,gBAAO,CAAC,YAAY,CAAC,EAAE,gBAAO,CAAC,0BAA0B,CAAC,CAAC,CAAC;gBAE5H,IAAI,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAC;gBACtE,IAAI,iBAAiB,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,sBAAsB,EAAE,gBAAO,CAAC,wBAAwB,CAAC;qBACpH,WAAW,CAAC,gBAAO,CAAC,+BAA+B,CAAC;qBACpD,IAAI,CAAC,gBAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,mDAAmD;gBAC/F,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAEhC,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC;qBAC3C,KAAK,CAAC,gBAAO,CAAC,aAAa,CAAC;qBAC5B,QAAQ,CAAC,gBAAO,CAAC,gBAAgB,CAAC;qBAClC,IAAI,CAAC,gBAAO,CAAC,YAAY,CAAC;qBAC1B,MAAM,CAAC;oBACJ,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;yBACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,6BAA6B,CAAC;yBAC9D,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAO,CAAC,WAAW,CAAC,CAAC;iBACjD,CAAC;qBACD,OAAO,CAAC,OAAO,CAAC;qBAChB,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,gBAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBAEpF,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACvB;YAED,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;gBACrC,4BAA4B;iBAC3B,gBAAgB,CAAC,UAAU,CAAC;iBAC5B,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAEzB,OAAO,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,qBAAqB,EAC/B,6BAAa,CAAC,wBAAwB,EACtC,mBAAmB,CAAC,KAAK,CAC5B,CAAC;IACN,CAAC;CACJ;AArED,kDAqEC","file":"ThumbnailCardDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport * as config from \"config\";\n\nexport class ThumbnailCardDialog extends TriggerActionDialog {\n\n    private static async step1(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        let cards = new Array<builder.ThumbnailCard>();\n        let numbCards = 3;\n\n        for (let i = 0; i < numbCards; i++) {\n            let buttons = new Array<builder.CardAction>();\n            /**\n             * This is an example of a button using invoke to begin a new dialog\n             * the response field is used as a way to pass data to the newly begun dialog\n             * the response field is not needed\n             *\n             * This is an example of getting the input data from the args\n             * when dialog is begun with beginDialog()\n             */\n            // let input = \"\";\n            // if (args.response) {\n            //     input = args.response;\n            // }\n            buttons.push(new builder.CardAction(session)\n                .type(\"invoke\")\n                .title(Strings.invoke_button_hello_dialog)\n                .value(\"{\" +\n                    \"\\\"dialog\\\": \\\"\" + DialogIds.HelloDialogId + \"\\\", \" +\n                    \"\\\"response\\\": \\\"Information for called intent\\\"\" +\n                \"}\"),\n            );\n\n            buttons.push(builder.CardAction.imBack(session, session.gettext(Strings.hello_imback), Strings.imback_button_hello_dialog));\n\n            let messageBackButtonValue = JSON.stringify({ anything: \"abc12345\" });\n            let messageBackButton = builder.CardAction.messageBack(session, messageBackButtonValue, Strings.messageBack_button_title)\n                .displayText(Strings.messageBack_button_display_text)\n                .text(Strings.messageBack_button_text); // this matches match for MessageBackReceiverDialog\n            buttons.push(messageBackButton);\n\n            let newCard = new builder.ThumbnailCard(session)\n                .title(Strings.default_title)\n                .subtitle(Strings.default_subtitle)\n                .text(Strings.default_text)\n                .images([\n                    new builder.CardImage(session)\n                        .url(config.get(\"app.baseUri\") + \"/assets/computer_person.jpg\")\n                        .alt(session.gettext(Strings.img_default)),\n                ])\n                .buttons(buttons)\n                .tap(builder.CardAction.imBack(session, session.gettext(Strings.hello_imback)));\n\n            cards.push(newCard);\n        }\n\n        session.send(new builder.Message(session)\n            // .attachmentLayout(\"list\")\n            .attachmentLayout(\"carousel\")\n            .attachments(cards));\n\n        session.endDialog();\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.ThumbnailCardDialogId,\n            DialogMatches.ThumbnailCardDialogMatch,\n            ThumbnailCardDialog.step1,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}