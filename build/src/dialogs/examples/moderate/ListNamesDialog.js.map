{"version":3,"sources":["../src/dialogs/examples/moderate/ListNamesDialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,4EAAyE;AACzE,4DAAkE;AAClE,wDAAqD;AACrD,gEAA6D;AAG7D,qBAA6B,SAAQ,yCAAmB;IAE5C,MAAM,CAAO,WAAW,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAClJ,yCAAyC;YACzC,IAAI,kBAAkB,GAAI,OAAO,CAAC,SAAsC,CAAC;YACzE,IAAI,UAAU,GAAI,OAAO,CAAC,OAAO,CAAC,OAAyC,CAAC;YAC5E,IAAI,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC;YAE1C,sEAAsE;YACtE,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,IAAI,kCAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACvC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;aAChD;iBAAM;gBACH,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;aACpD;YAED,kBAAkB,CAAC,YAAY,CAC3B,aAAa,EACb,MAAM,EACN,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBACZ,IAAI,CAAC,GAAG,EAAE;oBACN,IAAI,QAAQ,GAAG,EAAE,CAAC;oBAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACpC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC;qBACtE;oBACD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC1B;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACtB;gBACD,OAAO,CAAC,SAAS,EAAE,CAAC;YACxB,CAAC,CACJ,CAAC;QACN,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,iBAAiB,EAC3B,6BAAa,CAAC,oBAAoB,EAClC,eAAe,CAAC,WAAW,CAC9B,CAAC;IACN,CAAC;CACJ;AA3CD,0CA2CC","file":"ListNamesDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { isMessageFromChannel } from \"../../../utils/DialogUtils\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport * as teams from \"botbuilder-teams\";\n\nexport class ListNamesDialog extends TriggerActionDialog {\n\n    private static async fetchRoster(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        // casting to keep away typescript errors\n        let teamsChatConnector = (session.connector as teams.TeamsChatConnector);\n        let msgAddress = (session.message.address as builder.IChatConnectorAddress);\n        let msgServiceUrl = msgAddress.serviceUrl;\n\n        // if a message is from a channel, use the team.id to fetch the roster\n        let currId = null;\n        if (isMessageFromChannel(session.message)) {\n            currId = session.message.sourceEvent.team.id;\n        } else {\n            currId = session.message.address.conversation.id;\n        }\n\n        teamsChatConnector.fetchMembers(\n            msgServiceUrl,\n            currId,\n            (err, result) => {\n                if (!err) {\n                    let response = \"\";\n                    for (let i = 0; i < result.length; i++) {\n                        response += result[i].givenName + \" \" + result[i].surname + \"<br>\";\n                    }\n                    session.send(response);\n                } else {\n                    session.error(err);\n                }\n                session.endDialog();\n            },\n        );\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.ListNamesDialogId,\n            DialogMatches.ListNamesDialogMatch,\n            ListNamesDialog.fetchRoster,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}