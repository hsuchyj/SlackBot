{"version":3,"sources":["../src/dialogs/examples/teams/ChannelDataDialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,4EAAyE;AACzE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AACjD,4DAAyD;AAEzD,uBAA+B,SAAQ,yCAAmB;IAE9C,MAAM,CAAO,KAAK,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAC5I;;;;;;;;;;;;eAYG;YAEH,sFAAsF;YACtF,qCAAqC;YACrC,kFAAkF;YAClF,2CAA2C;YAC3C,IAAI,WAAW,GAAG,yBAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;gBACvB,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC;aAC5B;YACD,WAAW,CAAC,QAAQ,EAAE,CAAC;YAEvB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE;gBACpC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,GAAG,CAAC,CAAC;aACzC;YACD,OAAO,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;YAEpC,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,qBAAqB,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;YAClE,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,0BAA0B,EAAE,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAEpF,sEAAsE;YACtE,MAAM,yBAAW,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAEzF,OAAO,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,mBAAmB,EAC7B,6BAAa,CAAC,sBAAsB,EAAE,mBAAmB;QACzD,iBAAiB,CAAC,KAAK,CAC1B,CAAC;IACN,CAAC;CACJ;AAlDD,8CAkDC","file":"ChannelDataDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport { ChannelData } from \"../../../utils/ChannelData\";\n\nexport class ChannelDataDialog extends TriggerActionDialog {\n\n    private static async step1(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        /**\n         * Currently, using the channel data works as follows:\n         *\n         * There is middleware, LoadBotChannelData, in src/Bot.ts that loads the channel data\n         * on every incoming message - this allows you to get it with ChannelData.get(session)\n         *\n         * In order to update the channel data, though, (and this could be placed in middleware\n         * if you so desired so that it would automatically happen with every outgoing message)\n         * currently you must manually call await ChannelData.saveToStorage(...) - the choice\n         * to not have it save automatically now was to save one less call to the database for\n         * every outgoing message because the number of times we update the channelData is\n         * relatively low\n         */\n\n        // this dialog can be used to show the differences of conversationData and channelData\n        // in a 1:1 chat the two are the same\n        // in a channel each reply chain has its own conversationData, but the channelData\n        // is the same throughout every reply chain\n        let channelData = ChannelData.get(session);\n        if (!channelData.testNumb) {\n            channelData.testNumb = 0;\n        }\n        channelData.testNumb++;\n\n        if (!session.conversationData.testNumb) {\n            session.conversationData.testNumb = 0;\n        }\n        session.conversationData.testNumb++;\n\n        session.send(Strings.channel_data_testNumb, channelData.testNumb);\n        session.send(Strings.conversation_data_testNumb, session.conversationData.testNumb);\n\n        // the channelStorage field is set at the bot's creation in src/app.ts\n        await ChannelData.saveToStorage(session, args.constructorArgs.bot.get(\"channelStorage\"));\n\n        session.endDialog();\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.ChannelDataDialogId,\n            DialogMatches.ChannelDataDialogMatch, // /channel data/i,\n            ChannelDataDialog.step1,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}