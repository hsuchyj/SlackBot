{"version":3,"sources":["../src/dialogs/examples/teams/DeeplinkDialog.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAsC;AACtC,4EAAyE;AACzE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AACjD,iCAAiC;AACjC,2CAA2C;AAC3C,4DAAkE;AAElE,oBAA4B,SAAQ,yCAAmB;IAE3C,MAAM,CAAO,KAAK,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAC5I,IAAI,OAAO,GAAG,IAAI,KAAK,EAAsB,CAAC;YAE9C,IAAI,kCAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBACvC,8HAA8H;gBAC9H,kDAAkD;gBAClD,kHAAkH;gBAClH,+CAA+C;gBAC/C,8FAA8F;gBAC9F,mHAAmH;gBACnH,+EAA+E;gBAC/E,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACpC,IAAI,iBAAiB,GAAG,SAAS,CAAC;gBAClC,IAAI,WAAW,GAAG,WAAW,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,mBAAmB,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;gBAC3H,IAAI,qBAAqB,GAAG,uCAAuC,GAAG,KAAK,GAAG,GAAG,GAAG,iBAAiB,GAAG,GAAG,GAAG,WAAW,CAAC;gBAC1H,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,EAAE,gBAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;aAC3G;YAED,sFAAsF;YACtF,oCAAoC;YACpC,0CAA0C;YAC1C,iFAAiF;YAEjF,yEAAyE;YACzE,iGAAiG;YAEjG,yFAAyF;YACzF,4EAA4E;YAC5E,oIAAoI;YACpI,0DAA0D;YAC1D,IAAI,KAAK,GAAG,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC5C,IAAI,iBAAiB,GAAG,aAAa,CAAC,CAAC,oCAAoC;YAC3E,IAAI,WAAW,GAAG,WAAW,CAAC,SAAS,CACnC;gBACI,gBAAgB,EAAE,MAAM;gBACxB,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC;aACpD,CACJ,CAAC;YACF,IAAI,qBAAqB,GAAG,uCAAuC,GAAG,KAAK,GAAG,GAAG,GAAG,iBAAiB,GAAG,GAAG,GAAG,WAAW,CAAC;YAC1H,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,qBAAqB,EAAE,gBAAO,CAAC,eAAe,CAAC,CAAC,CAAC;YAElG,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;iBACtC,IAAI,CAAC,gBAAO,CAAC,kBAAkB,EAAE,qBAAqB,CAAC;iBACvD,OAAO,CAAC,OAAO,CAAC,CAAC;YAEtB,OAAO,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;iBACpC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;YAE7B,OAAO,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,gBAAgB,EAC1B,6BAAa,CAAC,mBAAmB,EACjC,cAAc,CAAC,KAAK,CACvB,CAAC;IACN,CAAC;CACJ;AA9DD,wCA8DC","file":"DeeplinkDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport * as config from \"config\";\nimport * as querystring from \"querystring\";\nimport { isMessageFromChannel } from \"../../../utils/DialogUtils\";\n\nexport class DeeplinkDialog extends TriggerActionDialog {\n\n    private static async step1(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        let buttons = new Array<builder.CardAction>();\n\n        if (isMessageFromChannel(session.message)) {\n            // create button to deep link to the configurable channel tab - configurable channel tab must have been added for this to work\n            // pattern for configurable channel tab deep link:\n            // https://teams.microsoft.com/l/entity/APP_ID/ENTITY_ID?webUrl=ENTITY_WEB_URL&label=<entityLabel>&context=CONTEXT\n            // APP_ID is the appId assigned in the manifest\n            // ENTITY_ID is the entityId that is set for that channel tab when your config page creates it\n            // ENTITY_WEB_URL is a url that is opened in a browswer on a mobile device if this url is opened on a mobile device\n            // CONTEXT is a url encoded json object with a channelId parameter inside of it\n            let appId = config.get(\"app.appId\");\n            let configTabEntityId = \"test123\";\n            let queryParams = querystring.stringify({ context: \"{\\\"channelId\\\":\\\"\" + session.message.sourceEvent.channel.id + \"\\\"}\" });\n            let configTabHardCodedUrl = \"https://teams.microsoft.com/l/entity/\" + appId + \"/\" + configTabEntityId + \"?\" + queryParams;\n            buttons.push(builder.CardAction.openUrl(session, configTabHardCodedUrl, Strings.open_configurable_tab));\n        }\n\n        // create a button to deep link to the static tab located in the 1:1 chat with the bot\n        // pattern for static tab deep link:\n        // (at a minimum to get to the static tab)\n        // https://teams.microsoft.com/l/entity/28:BOT_ID/ENTITY_ID?conversationType=chat\n\n        // (for sending data to that tab) - look at the HelpDialog for an example\n        // https://teams.microsoft.com/l/entity/28:BOT_ID/ENTITY_ID?conversationType=chat&context=CONTEXT\n\n        // BOT_ID is the bot id that comes from your bot registration with 28: added to the front\n        // ENTITY_ID is the entityId that is set for that static tab in the manifest\n        // CONTEXT is a url encoded json object with a subEntityId parameter inside of it â€“ this is how you can pass data to your static tab\n        // e.g. %7B%22subEntityId%22%3A%22SUB_ENTITY_ID_DATA%22%7D\n        let botId = \"28:\" + config.get(\"bot.botId\");\n        let staticTabEntityId = \"1on1test123\"; // this comes from the manifest file\n        let queryParams = querystring.stringify(\n            {\n                conversationType: \"chat\",\n                context: JSON.stringify({ subEntityId: \"stuff\" }),\n            },\n        );\n        let staticTabHardCodedUrl = \"https://teams.microsoft.com/l/entity/\" + botId + \"/\" + staticTabEntityId + \"?\" + queryParams;\n        buttons.push(builder.CardAction.openUrl(session, staticTabHardCodedUrl, Strings.open_static_tab));\n\n        let newCard = new builder.HeroCard(session)\n            .text(Strings.deeplink_card_text, staticTabHardCodedUrl)\n            .buttons(buttons);\n\n        session.send(new builder.Message(session)\n            .addAttachment(newCard));\n\n        session.endDialog();\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.DeeplinkDialogId,\n            DialogMatches.DeeplinkDialogMatch,\n            DeeplinkDialog.step1,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}