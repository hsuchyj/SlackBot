{"version":3,"sources":["../src/dialogs/examples/teams/FetchTeamInfoDialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,4EAAyE;AACzE,4DAAkE;AAClE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AAGjD,yBAAiC,SAAQ,yCAAmB;IAEhD,MAAM,CAAO,oBAAoB,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAC3J,yCAAyC;YACzC,IAAI,kBAAkB,GAAI,OAAO,CAAC,SAAsC,CAAC;YACzE,IAAI,UAAU,GAAI,OAAO,CAAC,OAAO,CAAC,OAAyC,CAAC;YAC5E,IAAI,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC;YAE1C,sEAAsE;YACtE,IAAI,CAAC,kCAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,EAC1C;gBACI,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,2BAA2B,CAAC,CAAC;aACrD;iBAED;gBACI,IAAI,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;gBAEjD,kBAAkB,CAAC,aAAa,CAAC,aAAa,EAAE,MAAM,EAClD,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;oBACZ,IAAI,CAAC,GAAG,EAAE;wBACN,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC;qBACtE;yBAAM;wBACH,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;qBACtD;gBACL,CAAC,CACJ,CAAC;aACL;YAED,OAAO,CAAC,SAAS,EAAE,CAAC;QACxB,CAAC;KAAA;IAED,8CAA8C;IACtC,MAAM,CAAC,wBAAwB,CAAC,WAA2B;QAC/D,IAAI,WAAW,EAAE;YACb,8EAA8E;YAC9E,OAAO;oDACiC,WAAW,CAAC,EAAE;sDACZ,WAAW,CAAC,IAAI;yDACZ,WAAmB,CAAC,UAAU;6BAC3D,CAAC;SACrB;QACD,OAAO,EAAE,CAAC;IACd,CAAC;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,qBAAqB,EAC/B,6BAAa,CAAC,wBAAwB,EACtC,mBAAmB,CAAC,oBAAoB,CAC3C,CAAC;IACN,CAAC;CACJ;AArDD,kDAqDC","file":"FetchTeamInfoDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { isMessageFromChannel } from \"../../../utils/DialogUtils\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport * as teams from \"botbuilder-teams\";\n\nexport class FetchTeamInfoDialog extends TriggerActionDialog {\n\n    private static async fetchTeamInfoPayload(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        // casting to keep away typescript errors\n        let teamsChatConnector = (session.connector as teams.TeamsChatConnector);\n        let msgAddress = (session.message.address as builder.IChatConnectorAddress);\n        let msgServiceUrl = msgAddress.serviceUrl;\n\n        // if a message is from a channel, use the team.id to fetch the roster\n        if (!isMessageFromChannel(session.message))\n        {\n            session.send(Strings.teaminfo_notinchannel_error);\n        }\n        else\n        {\n            let teamId = session.message.sourceEvent.team.id;\n\n            teamsChatConnector.fetchTeamInfo(msgServiceUrl, teamId,\n                (err, result) => {\n                    if (!err) {\n                        session.send(FetchTeamInfoDialog.generateTableForTeamInfo(result));\n                    } else {\n                        session.send(Strings.teaminfo_error + err.message);\n                    }\n                },\n            );\n        }\n\n        session.endDialog();\n    }\n\n    // Generate the team info data in table format\n    private static generateTableForTeamInfo(teamDetails: teams.TeamInfo): string {\n        if (teamDetails) {\n            // Currently, aadGroupId is present but is not defined in the TeamInfo typings\n            return `<table border='1'>\n                        <tr><td> Team id </td><td>${teamDetails.id}</td></tr>\n                        <tr><td> Team name </td><td>${teamDetails.name}</td></tr>\n                        <tr><td> AAD group id </td><td>${(teamDetails as any).aadGroupId}</td><tr>\n                    </table>`;\n        }\n        return \"\";\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.FetchTeamInfoDialogId,\n            DialogMatches.FetchTeamInfoDialogMatch,\n            FetchTeamInfoDialog.fetchTeamInfoPayload,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}