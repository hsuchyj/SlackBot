{"version":3,"sources":["../src/dialogs/examples/teams/ProactiveMsgTo1to1Dialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,4EAAyE;AACzE,4DAA8D;AAC9D,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AAEjD,8BAAsC,SAAQ,yCAAmB;IAErD,MAAM,CAAO,WAAW,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YAClJ,wCAAwC;YACxC,IAAI,UAAU,GAAI,OAAO,CAAC,OAAO,CAAC,OAAyC,CAAC;YAC5E,IAAI,aAAa,GAAG,UAAU,CAAC,UAAU,CAAC;YAE1C,yGAAyG;YACzG,IAAI,UAAU,GAAG;gBACb,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;gBAC7C,WAAW,EAAE;oBACT,MAAM,EAAE;wBACJ,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE;qBAC5C;iBACJ;gBACD,GAAG,EAAE;oBACD,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;iBAGrC;gBACD,UAAU,EAAE,aAAa;gBACzB,OAAO,EAAE,IAAI;aAChB,CAAC;YAEF,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAO,GAAG,EAAE,aAAa,EAAE,EAAE;gBACzE,IAAI,CAAC,GAAG,EAAE;oBACN,+DAA+D;oBAC/D,2CAA2C;oBAC3C,8EAA8E;oBAC9E,UAAU;oBACV,IAAI,YAAY,qBAAQ,OAAO,CAAC,OAAO,IAAE,OAAO,EAAE,aAAa,GAAE,CAAC;oBAClE,qGAAqG;oBACrG,IAAI,cAAc,GAAG,MAAM,8BAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;oBACpF,cAAc,CAAC,WAAW,CAAC,qBAAS,CAAC,aAAa,CAAC,CAAC;oBAEpD,8EAA8E;oBAC9E,2EAA2E;oBAC3E,0CAA0C;oBAE1C,kDAAkD;oBAClD,8BAA8B;oBAC9B,+CAA+C;oBAC/C,8BAA8B;oBAE9B,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,uBAAuB,CAAC,CAAC;iBACjD;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACtB;gBACD,OAAO,CAAC,SAAS,EAAE,CAAC;YACxB,CAAC,CAAA,CAAC,CAAC;QACP,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,0BAA0B,EACpC,6BAAa,CAAC,6BAA6B,EAE3C,wBAAwB,CAAC,WAAW,CAmCvC,CAAC;IACN,CAAC;CACJ;AAjGD,4DAiGC","file":"ProactiveMsgTo1to1Dialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { loadSessionAsync } from \"../../../utils/DialogUtils\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\n\nexport class ProactiveMsgTo1to1Dialog extends TriggerActionDialog {\n\n    private static async send1to1Msg(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        // casting to keep away typescript error\n        let msgAddress = (session.message.address as builder.IChatConnectorAddress);\n        let msgServiceUrl = msgAddress.serviceUrl;\n\n        // to send a proactive message to a one to one chat create the address, but leave out the conversation id\n        let newAddress = {\n            channelId: \"msteams\",\n            user: { id: session.message.address.user.id },\n            channelData: {\n                tenant: {\n                    id: session.message.sourceEvent.tenant.id,\n                },\n            },\n            bot: {\n                id: session.message.address.bot.id,\n                // The bot's name can be used, but is not necessary\n                // name: session.message.address.bot.name,\n            },\n            serviceUrl: msgServiceUrl,\n            useAuth: true,\n        };\n\n        session.connector.startConversation(newAddress, async (err, resultAddress) => {\n            if (!err) {\n                // create a new event based on the incoming message, but change\n                // the address to be the new result address\n                // this is done so the new session has the same locale setting as the original\n                // message\n                let createdEvent = { ...session.message, address: resultAddress };\n                // using this template and base trigger dialog, the bot is always present in args.constructorArgs.bot\n                let sessionFor1to1 = await loadSessionAsync(args.constructorArgs.bot, createdEvent);\n                sessionFor1to1.beginDialog(DialogIds.HelloDialogId);\n\n                // if you wish to only send one message rather than starting a dialog, you can\n                // skip the three steps above (comment them out), not create a new session,\n                // and run the commented out section below\n\n                // let proactiveMsg = new builder.Message(session)\n                //     .address(resultAddress)\n                //     .text(Strings.proactive_msg_one_to_one);\n                // session.send(proactiveMsg);\n\n                session.send(Strings.one_to_one_message_sent);\n            } else {\n                session.error(err);\n            }\n            session.endDialog();\n        });\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.ProactiveMsgTo1to1DialogId,\n            DialogMatches.ProactiveMsgTo1to1DialogMatch,\n\n            ProactiveMsgTo1to1Dialog.send1to1Msg,\n\n            // Below is another way to send a direct 1:1 message.  It is limited in that it does not work with the\n            // automatic localization and multiple languages system\n            // To Use: comment out the function directly above, Start1to1TrigDialog.send1to1Msg,\n            // uncomment the function below\n\n            // async (session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void) => {\n            //     // casting to keep away typescript error\n            //     let msgAddress = (session.message.address as builder.IChatConnectorAddress);\n            //     let msgServiceUrl = msgAddress.serviceUrl;\n\n            //     let address = {\n            //         channelId: \"msteams\",\n            //         user: { id: session.message.address.user.id },\n            //         channelData: {\n            //             tenant: {\n            //                 id: session.message.sourceEvent.tenant.id,\n            //             },\n            //         },\n            //         bot: {\n            //             id: session.message.address.bot.id,\n            //             // The bot's name can be used, but is not necessary\n            //             // name: session.message.address.bot.name,\n            //         },\n            //         serviceUrl: msgServiceUrl,\n            //         useAuth: true,\n            //     };\n\n            //     // this does not currently work with the localization and multiple languages system\n            //     bot.beginDialog(address, DialogIds.TestTrigDialogId);\n\n            //     session.send(Strings.one_to_one_message_sent);\n            //     session.endDialog();\n            // },\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}