{"version":3,"sources":["../src/dialogs/examples/teams/ProactiveMsgToChannelDialog.ts"],"names":[],"mappings":"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","file":"ProactiveMsgToChannelDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { isMessageFromChannel, startReplyChainInChannel } from \"../../../utils/DialogUtils\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport * as teams from \"botbuilder-teams\";\n\nexport class ProactiveMsgToChannelDialog extends TriggerActionDialog {\n\n    private static async step1(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        if (!isMessageFromChannel(session.message)) {\n            session.send(Strings.cmd_only_works_in_channel);\n            session.endDialog();\n            return;\n        }\n\n        let channelNameInput = args.intent.matched[1].trim();\n        if (channelNameInput) {\n            next({ response: channelNameInput });\n        } else {\n            builder.Prompts.text(session, Strings.choose_channel_prompt);\n        }\n    }\n\n    private static async step2(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        let inputChannelName = args.response.trim();\n\n        // casting to keep away typescript error\n        let teamsChatConnector = (session.connector as teams.TeamsChatConnector);\n        let msgAddress = (session.message.address as builder.IChatConnectorAddress);\n        let msgServiceUrl = msgAddress.serviceUrl;\n        let teamId = session.message.sourceEvent.team.id;\n\n        teamsChatConnector.fetchChannelList(\n            msgServiceUrl,\n            teamId,\n            async (err, result) => {\n                if (!err) {\n                    let desiredChannelId = null;\n                    for (let i = 0; i < result.length; i++) {\n                        let currentChannelName = result[i].name;\n                        // Do this change of name because the fetchChannelList call will return the General\n                        // channel without a name - string of \"General\" channel's name needs to be localized\n                        if (!currentChannelName) {\n                            currentChannelName = session.gettext(Strings.general_channel_name);\n                        }\n                        if (inputChannelName.toUpperCase() === currentChannelName.toUpperCase()) {\n                            desiredChannelId = result[i].id;\n                            break;\n                        }\n                    }\n                    if (!desiredChannelId) {\n                        session.send(Strings.channel_choice_failure);\n                        session.endDialog();\n                        return;\n                    }\n\n                    let proactiveMsg = new builder.Message(session).text(Strings.proactive_channel_msg);\n                    // send the first proactive message to a channel using this function in order to get the updated\n                    // conversation.id in the address of the response\n                    let replyChainAddress = await startReplyChainInChannel((session.connector as any), proactiveMsg, desiredChannelId);\n\n                    // use this newly returned address with its updated conversation.id in order to send a proactive message\n                    // as a reply to the first proactive message\n                    let proactiveMsgInReplyChain = new builder.Message(session).text(Strings.proactive_msg_in_reply_chain).address(replyChainAddress);\n                    session.send(proactiveMsgInReplyChain);\n\n                    session.send(Strings.proactive_channel_msg_sent);\n                    session.endDialog();\n                } else {\n                    session.endDialog(Strings.error_proactive_channel_msg);\n                }\n            },\n        );\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.ProactiveMsgToChannelDialogId,\n            DialogMatches.ProactiveMsgToChannelDialogMatch,\n            [\n                ProactiveMsgToChannelDialog.step1,\n                ProactiveMsgToChannelDialog.step2,\n            ],\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}