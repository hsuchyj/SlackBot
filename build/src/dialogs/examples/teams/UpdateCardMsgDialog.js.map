{"version":3,"sources":["../src/dialogs/examples/teams/UpdateCardMsgDialog.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAAsC;AACtC,4EAAyE;AACzE,wDAAqD;AACrD,gEAA6D;AAC7D,mDAAiD;AACjD,iCAAiC;AAEjC,yBAAiC,SAAQ,yCAAmB;IACxD,+GAA+G;IAC/G,8FAA8F;IACtF,MAAM,CAAO,iBAAiB,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YACxJ,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,EAC7B;gBACI,IAAI,iBAAiB,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBAC/D,IAAI,sBAAsB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC;gBAEvF,IAAI,iBAAiB,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,sBAAsB,CAAC;qBAClF,WAAW,CAAC,gBAAO,CAAC,+BAA+B,CAAC;qBACpD,KAAK,CAAC,gBAAO,CAAC,kBAAkB,CAAC;qBACjC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,uFAAuF;gBAEzH,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC;qBACtC,KAAK,CAAC,gBAAO,CAAC,kBAAkB,EAAE,iBAAiB,CAAC;qBACpD,QAAQ,CAAC,gBAAO,CAAC,qBAAqB,CAAC;qBACvC,IAAI,CAAC,gBAAO,CAAC,YAAY,CAAC;qBAC1B,MAAM,CAAC;oBACJ,IAAI,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC;yBACzB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,6BAA6B,CAAC;yBAC9D,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAO,CAAC,WAAW,CAAC,CAAC;iBAC7C,CAAC;qBACL,OAAO,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBAElC,IAAI,wBAAwB,qBAAQ,OAAO,CAAC,OAAO,CAAC,OAAO,IAAE,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,SAAS,GAAE,CAAC;gBAE7F,IAAI,GAAG,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;qBACjC,OAAO,CAAC,wBAAwB,CAAC;qBACjC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAE5B,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;oBACvD,IAAI,CAAC,GAAG,EAAE;wBACN,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,wBAAwB,CAAC,CAAC;qBAClD;yBAAM;wBACH,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;qBACzD;oBACD,OAAO,CAAC,SAAS,EAAE,CAAC;gBACxB,CAAC,CAAC,CAAC;aACN;iBAED;gBACI,OAAO,CAAC,IAAI,CAAC,gBAAO,CAAC,gBAAgB,CAAC,CAAC;gBACvC,OAAO,CAAC,SAAS,EAAE,CAAC;aACvB;QACL,CAAC;KAAA;IAED,YACI,GAAyB;QAEzB,KAAK,CAAC,GAAG,EACL,qBAAS,CAAC,qBAAqB,EAC/B,6BAAa,CAAC,wBAAwB,EACtC,mBAAmB,CAAC,iBAAiB,CACxC,CAAC;IACN,CAAC;CACJ;AAxDD,kDAwDC","file":"UpdateCardMsgDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { TriggerActionDialog } from \"../../../utils/TriggerActionDialog\";\nimport { DialogIds } from \"../../../utils/DialogIds\";\nimport { DialogMatches } from \"../../../utils/DialogMatches\";\nimport { Strings } from \"../../../locale/locale\";\nimport * as config from \"config\";\n\nexport class UpdateCardMsgDialog extends TriggerActionDialog {\n    // update the card, if user has already setup the card message from below dialog file using update button click\n    // microsoft-teams-sample-complete-node\\src\\dialogs\\examples\\teams\\UpdateCardMsgSetupDialog.ts\n    private static async updateCardMessage(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        if (session.message.replyToId)\n        {\n            let updateCardCounter = session.message.value.updateCounterKey;\n            let messageBackButtonValue = JSON.stringify({ updateCounterKey: ++updateCardCounter });\n\n            let messageBackButton = builder.CardAction.messageBack(session, messageBackButtonValue)\n                .displayText(Strings.messageBack_button_display_text)\n                .title(Strings.update_card_button)\n                .text(\"update card message\"); // This must be a string that routes to UpdateCardMsgDialog, which handles card updates\n\n            let newCard = new builder.HeroCard(session)\n                .title(Strings.updated_card_title, updateCardCounter)\n                .subtitle(Strings.updated_card_subtitle)\n                .text(Strings.default_text)\n                .images([\n                    new builder.CardImage(session)\n                        .url(config.get(\"app.baseUri\") + \"/assets/computer_person.jpg\")\n                        .alt(session.gettext(Strings.img_default)),\n                    ])\n                .buttons([messageBackButton]);\n\n            let addressOfMessageToUpdate = { ...session.message.address, id: session.message.replyToId };\n\n            let msg = new builder.Message(session)\n                .address(addressOfMessageToUpdate)\n                .addAttachment(newCard);\n\n            session.connector.update(msg.toMessage(), (err, address) => {\n                if (!err) {\n                    session.send(Strings.updated_msg_confirmation);\n                } else {\n                    session.send(Strings.update_card_error + err.message);\n                }\n                session.endDialog();\n            });\n        }\n        else\n        {\n            session.send(Strings.no_msg_to_update);\n            session.endDialog();\n        }\n    }\n\n    constructor(\n        bot: builder.UniversalBot,\n    ) {\n        super(bot,\n            DialogIds.UpdateCardMsgDialogId,\n            DialogMatches.UpdateCardMsgDialogMatch,\n            UpdateCardMsgDialog.updateCardMessage,\n        );\n    }\n}\n"],"sourceRoot":"/app/build"}