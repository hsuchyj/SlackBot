{"version":3,"sources":["../src/middleware/SimulateResetBotChat.ts"],"names":[],"mappings":";;AAEA,qDAAqD;AACrD;IAEI,YAAoB,GAAyB;QAAzB,QAAG,GAAH,GAAG,CAAsB;QAG7B,eAAU,GAAG,CAAC,OAAwB,EAAE,IAAc,EAAQ,EAAE;YAC5E,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAC9B,IAAI,OAAO;gBACP,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,IAAO,uCAAuC;gBACnF,OAAO,CAAC,IAAI,KAAK,eAAe,EAAY,oBAAoB;aACpE;gBACI,2CAA2C;gBAC3C,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACtB,OAAO,CAAC,gBAAgB,GAAG,EAAE,CAAC;gBAC9B,OAAO,CAAC,uBAAuB,GAAG,EAAE,CAAC;gBACrC,OAAO,CAAC,IAAI,EAAE,CAAC,SAAS,EAAE,CAAC;gBAE3B,mFAAmF;gBAEnF,gEAAgE;gBAChE,2GAA2G;gBAC3G,IAAI,uBAAuB,GAAQ;oBAC/B,IAAI,EAAE,oBAAoB;oBAC1B,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,IAAI,EAAE,OAAO,CAAC,IAAI;oBAClB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,YAAY,EAAE,CAAE,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAE;iBAC9D,CAAC;gBACF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;gBAE1C,+CAA+C;aAClD;iBAAM;gBACH,IAAI,EAAE,CAAC;aACV;QACL,CAAC,CAAA;IAlCD,CAAC;CAmCJ;AAtCD,oDAsCC","file":"SimulateResetBotChat.js","sourcesContent":["import * as builder from \"botbuilder\";\n\n// Handle requests to simulate resetting the bot chat\nexport class SimulateResetBotChat implements builder.IMiddlewareMap {\n\n    constructor(private bot: builder.UniversalBot) {\n    }\n\n    public readonly botbuilder = (session: builder.Session, next: Function): void => {\n        let message = session.message;\n        if (message &&\n            !message.address.conversation.isGroup &&    // Reset bot chat is only for 1:1 chats\n            message.text === \"/resetbotchat\")           // The magic command\n        {\n            // Forget everything we know about the user\n            session.userData = {};\n            session.conversationData = {};\n            session.privateConversationData = {};\n            session.save().sendBatch();\n\n            // If you need to reset the user state in other services your app uses, do it here.\n\n            // Synthesize a conversation update event and send it to the bot\n            // Note that this is a fake event, as Teams does not support deleting a 1:1 conversation and re-creating it\n            let conversationUpdateEvent: any = {\n                type: \"conversationUpdate\",\n                agent: message.agent,\n                source: message.source,\n                sourceEvent: message.sourceEvent,\n                user: message.user,\n                address: message.address,\n                timestamp: message.timestamp,\n                membersAdded: [ message.address.user, message.address.bot ],\n            };\n            this.bot.receive(conversationUpdateEvent);\n\n            // Stop processing the original trigger message\n        } else {\n            next();\n        }\n    }\n}\n"],"sourceRoot":"/app/build"}