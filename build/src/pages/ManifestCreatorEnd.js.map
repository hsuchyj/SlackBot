{"version":3,"sources":["../src/pages/ManifestCreatorEnd.ts"],"names":[],"mappings":";;;;;;;;;;AACA,iCAAiC;AACjC,yBAAyB;AACzB,gCAAgC;AAEhC;IAEW,MAAM,CAAC,iBAAiB;QAC3B,OAAO,UAAgB,GAAQ,EAAE,GAAQ,EAAE,IAAS;;gBAChD,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBACxC,IAAI,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACpC,IAAI,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;gBAElE,EAAE,CAAC,QAAQ,CAAC,8BAA8B,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAC9D,IAAI,CAAC,GAAG,EAAE;wBACN,EAAE,CAAC,KAAK,CAAC,gCAAgC,EAAE,CAAC,IAAI,EAAE,EAAE;4BAChD,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,EAAE;gCAChD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;gCAC9C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;gCACrD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;gCAC3D,EAAE,CAAC,SAAS,CAAC,8CAA8C,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;oCACxE,IAAI,CAAC,IAAI,EAAE;wCACP,EAAE,CAAC,QAAQ,CAAC,6CAA6C,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;4CACvE,IAAI,CAAC,IAAI,EAAE;gDACP,IAAI,GAAG,GAAG,IAAI,GAAG,CAAC;gDAClB,GAAG,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;gDAChC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gDAChC,IAAI,OAAO,GAAG,EAAC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAC,CAAC;gDACtD,IAAI,UAAU,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gDACvC,EAAE,CAAC,SAAS,CAAC,oDAAoD,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE;oDAC9F,IAAI,CAAC,IAAI,EAAE;wDACP,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;wDAC3C,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;qDACjC;yDAAM;wDACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qDACrB;gDACL,CAAC,CAAC,CAAC;6CACN;iDAAM;gDACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;6CACrB;wCACL,CAAC,CAAC,CAAC;qCACN;yCAAM;wCACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qCACrB;gCACL,CAAC,CAAC,CAAC;6BACN;iCAAM;gCACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;6BACrB;wBACL,CAAC,CAAC,CAAC;qBACN;yBAAM;wBACH,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;qBACpB;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;SAAA,CAAC;IACN,CAAC;CACJ;AAlDD,gDAkDC","file":"ManifestCreatorEnd.js","sourcesContent":["import * as express from \"express\";\nimport * as config from \"config\";\nimport * as fs from \"fs\";\nimport * as Zip from \"node-zip\";\n\nexport class ManifestCreatorEnd {\n\n    public static getRequestHandler(): express.RequestHandler {\n        return async function (req: any, res: any, next: any): Promise<void> {\n            let baseUri = config.get(\"app.baseUri\");\n            let appId = config.get(\"bot.botId\");\n            let baseUriDomain = baseUri.replace(/^https:\\/\\/|^http:\\/\\//, \"\");\n\n            fs.readFile(\"../../manifest/manifest.json\", \"utf8\", (err, data) => {\n                if (!err) {\n                    fs.mkdir(\"../../manifest/createdManifest\", (err2) => {\n                        if (!err2 || (err2.code && err2.code === \"EEXIST\")) {\n                            data = data.replace(/<<BASE_URI>>/g, baseUri);\n                            data = data.replace(/<<REGISTERED_BOT_ID>>/g, appId);\n                            data = data.replace(/<<BASE_URI_DOMAIN>>/g, baseUriDomain);\n                            fs.writeFile(\"../../manifest/createdManifest/manifest.json\", data, (err3) => {\n                                if (!err3) {\n                                    fs.readFile(\"../../manifest/createdManifest/bot_blue.png\", (err4, data2) => {\n                                        if (!err4) {\n                                            let zip = new Zip;\n                                            zip.file(\"manifest.json\", data);\n                                            zip.file(\"bot_blue.png\", data2);\n                                            let options = {base64: false, compression: \"DEFLATE\"};\n                                            let zippedData = zip.generate(options);\n                                            fs.writeFile(\"../../manifest/createdManifest/createdManifest.zip\", zippedData, \"binary\", (err5) => {\n                                                if (!err5) {\n                                                    res.set(\"Content-Type\", \"application/zip\");\n                                                    res.end(zippedData, \"binary\");\n                                                } else {\n                                                    console.log(err5);\n                                                }\n                                            });\n                                        } else {\n                                            console.log(err4);\n                                        }\n                                    });\n                                } else {\n                                    console.log(err3);\n                                }\n                            });\n                        } else {\n                            console.log(err2);\n                        }\n                    });\n                } else {\n                    console.log(err);\n                }\n            });\n        };\n    }\n}\n"],"sourceRoot":"/app/build"}