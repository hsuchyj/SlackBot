{"version":3,"sources":["../src/storage/MongoDbBotChannelStorage.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,iCAAiC;AACjC,mCAAmC;AAGnC,sDAAsD;AACtD;IAMI,YACY,cAAsB,EACtB,gBAAwB;QADxB,mBAAc,GAAd,cAAc,CAAQ;QACtB,qBAAgB,GAAhB,gBAAgB,CAAQ;IACpC,CAAC;IAED,6BAA6B;IAChB,OAAO,CAAC,OAAkC;;YACnD,IAAI,OAAO,CAAC,SAAS,EAAE;gBACnB,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAExB,IAAI,MAAM,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;gBACvD,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAC7D,IAAI,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE;oBAC3B,OAAO,EAAE,WAAW,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;iBACzC;qBAAM;oBACH,OAAO,EAAG,CAAC;iBACd;aACJ;iBAAM;gBACH,OAAO,EAAG,CAAC;aACd;QACL,CAAC;KAAA;IAED,+BAA+B;IAClB,QAAQ,CAAC,OAAkC,EAAE,IAA4B;;YAClF,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,WAAW,EAAE;gBACzD,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAExB,IAAI,MAAM,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;gBACvD,IAAI,QAAQ,GAAG;oBACX,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,IAAI,EAAE,IAAI,CAAC,WAAW;iBACzB,CAAC;gBACF,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;aAC/E;QACL,CAAC;KAAA;IAED,uEAAuE;IAC/D,UAAU;QACd,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YACzB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;SACpD;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAED,2BAA2B;IACb,gBAAgB;;YAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,IAAI;oBACA,IAAI,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;oBACxE,IAAI,CAAC,kBAAkB,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBAChF;gBAAC,OAAO,CAAC,EAAE;oBACR,6BAA6B;oBAC7B,IAAI,CAAC,KAAK,EAAE,CAAC;oBACb,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;iBACjC;aACJ;QACL,CAAC;KAAA;IAED,uCAAuC;IAC/B,KAAK;QACT,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;IACL,CAAC;IAED,oCAAoC;IAC5B,gBAAgB,CAAC,OAAkC;QACvD,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC1B,OAAO,WAAW,OAAO,CAAC,SAAS,EAAE,CAAC;IAC1C,CAAC;CACJ;AA/ED,4DA+EC","file":"MongoDbBotChannelStorage.js","sourcesContent":["import * as assert from \"assert\";\nimport * as mongodb from \"mongodb\";\nimport { IBotChannelStorageContext, IBotChannelStorageData, IBotChannelStorage } from \"./BotChannelStorage\";\n\n/** Replacable storage system used by UniversalBot. */\nexport class MongoDbBotChannelStorage implements IBotChannelStorage {\n\n    private initializePromise: Promise<void>;\n    private mongoDb: mongodb.Db;\n    private botStateCollection: mongodb.Collection;\n\n    constructor(\n        private collectionName: string,\n        private connectionString: string) {\n    }\n\n    // Reads in data from storage\n    public async getData(context: IBotChannelStorageContext): Promise<IBotChannelStorageData> {\n        if (context.channelId) {\n            await this.initialize();\n\n            let filter = { \"_id\": this.getChannelDataId(context) };\n            let document = await this.botStateCollection.findOne(filter);\n            if (document && document.data) {\n                return { channelData: document.data };\n            } else {\n                return { };\n            }\n        } else {\n            return { };\n        }\n    }\n\n    // Writes out data from storage\n    public async saveData(context: IBotChannelStorageContext, data: IBotChannelStorageData): Promise<void> {\n        if (context.teamId && context.channelId && data.channelData) {\n            await this.initialize();\n\n            let filter = { \"_id\": this.getChannelDataId(context) };\n            let document = {\n                teamId: context.teamId,\n                channelId: context.channelId,\n                data: data.channelData,\n            };\n            await this.botStateCollection.updateOne(filter, document, { upsert: true });\n        }\n    }\n\n    // Returns a promise that is resolved when this instance is initialized\n    private initialize(): Promise<void> {\n        if (!this.initializePromise) {\n            this.initializePromise = this.initializeWorker();\n        }\n        return this.initializePromise;\n    }\n\n    // Initialize this instance\n    private async initializeWorker(): Promise<void> {\n        if (!this.mongoDb) {\n            try {\n                this.mongoDb = await mongodb.MongoClient.connect(this.connectionString);\n                this.botStateCollection = await this.mongoDb.collection(this.collectionName);\n            } catch (e) {\n                // console.log(e.toString());\n                this.close();\n                this.initializePromise = null;\n            }\n        }\n    }\n\n    // Close the connection to the database\n    private close(): void {\n        this.botStateCollection = null;\n        if (this.mongoDb) {\n            this.mongoDb.close();\n            this.mongoDb = null;\n        }\n    }\n\n    // Get id for channel data documents\n    private getChannelDataId(context: IBotChannelStorageContext): string {\n        assert(context.channelId);\n        return `channel:${context.channelId}`;\n    }\n}\n"],"sourceRoot":"/app/build"}