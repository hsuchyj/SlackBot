{"version":3,"sources":["../src/storage/MongoDbBotStorage.ts"],"names":[],"mappings":"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","file":"MongoDbBotStorage.js","sourcesContent":["import * as assert from \"assert\";\nimport * as async from \"async\";\nimport * as builder from \"botbuilder\";\nimport * as mongodb from \"mongodb\";\n\n// tslint:disable-next-line:variable-name\nconst Fields = {\n    userData: \"userData\",\n    conversationData: \"conversationData\",\n    privateConversationData: \"privateConversationData\",\n};\n\n/** Replacable storage system used by UniversalBot. */\nexport class MongoDbBotStorage implements builder.IBotStorage {\n\n    private initializePromise: Promise<void>;\n    private mongoDb: mongodb.Db;\n    private botStateCollection: mongodb.Collection;\n\n    constructor(\n        private collectionName: string,\n        private connectionString: string) {\n    }\n\n    // Reads in data from storage\n    public getData(context: builder.IBotStorageContext, callback: (err: Error, data: builder.IBotStorageData) => void): void {\n        this.initialize().then(() => {\n            // Build list of read commands\n            let list: any[] = [];\n            if (context.userId) {\n                if (context.persistUserData) {\n                    // Read userData\n                    list.push({\n                        id: this.getUserDataId(context),\n                        field: Fields.userData,\n                    });\n                }\n                if (context.conversationId) {\n                    // Read privateConversationData\n                    list.push({\n                        id: this.getPrivateConversationDataId(context),\n                        field: Fields.privateConversationData,\n                    });\n                }\n            }\n            if (context.persistConversationData && context.conversationId) {\n                // Read conversationData\n                list.push({\n                    id: this.getConversationDataId(context),\n                    field: Fields.conversationData,\n                });\n            }\n\n            // Execute reads in parallel\n            let data: builder.IBotStorageData = {};\n            async.each(list, (entry, cb) => {\n                let filter = { \"_id\": entry.id };\n                this.botStateCollection.findOne(filter, (error: any, entity: any) => {\n                    if (!error) {\n                        if (entity) {\n                            // let botData = entity.data || {};\n                            let botData = entity || {};\n                            try {\n                                (data as any)[entry.field] = botData != null ? botData : null;\n                            } catch (e) {\n                                error = e;\n                            }\n                            cb(error);\n                        } else {\n                            (data as any)[entry.field] = null;\n                            cb(error);\n                        }\n                    } else {\n                        cb(error);\n                    }\n                });\n            }, (err) => {\n                if (!err) {\n                    callback(null, data);\n                } else {\n                    let m = err.toString();\n                    callback(err instanceof Error ? err : new Error(m), null);\n                }\n            });\n        }).catch(err => callback(err, null));\n    }\n\n    // Writes out data from storage\n    public saveData(context: builder.IBotStorageContext, data: builder.IBotStorageData, callback?: (err: Error) => void): void {\n        // We initialize on every call, but only block on the first call. The reason for this is that we can't run asynchronous initialization in the class ctor\n        this.initialize().then(() => {\n            // Build list of write commands\n            let list: any[] = [];\n            if (context.userId) {\n                if (context.persistUserData) {\n                    // Write userData\n                    list.push({\n                        id: this.getUserDataId(context),\n                        userId: context.userId,\n                        field: Fields.userData,\n                        botData: data.userData,\n                    });\n                }\n                if (context.conversationId) {\n                    // Write privateConversationData\n                    list.push({\n                        id: this.getPrivateConversationDataId(context),\n                        userId: context.userId,\n                        conversationId: context.conversationId,\n                        field: Fields.privateConversationData,\n                        botData: data.privateConversationData,\n                    });\n                }\n            }\n            if (context.persistConversationData && context.conversationId) {\n                // Write conversationData\n                list.push({\n                    id: this.getConversationDataId(context),\n                    conversationId: context.conversationId,\n                    field: Fields.conversationData,\n                    botData: data.conversationData,\n                });\n            }\n\n            // Execute writes in parallel\n            async.each(list, (entry, errorCallback) => {\n                let filter = { \"_id\": entry.id };\n                // let document = {\n                //     // Tag each document with user id so we can find all user data later\n                //     userId: entry.userId || \"\",\n                //     data: entry.botData,\n                // };\n                let document = entry.botData;\n                document.userId = entry.userId || \"\";\n                this.botStateCollection.updateOne(filter, document, { upsert: true }, err => errorCallback(err));\n            }, (err) => {\n                if (callback) {\n                    if (!err) {\n                        callback(null);\n                    } else {\n                        let m = err.toString();\n                        callback(err instanceof Error ? err : new Error(m));\n                    }\n                }\n            });\n        }, (err) => callback(err));\n    }\n\n    // Returns a promise that is resolved when this instance is initialized\n    private initialize(): Promise<void> {\n        if (!this.initializePromise) {\n            this.initializePromise = this.initializeWorker();\n        }\n        return this.initializePromise;\n    }\n\n    // Initialize this instance\n    private async initializeWorker(): Promise<void> {\n        if (!this.mongoDb) {\n            try {\n                this.mongoDb = await mongodb.MongoClient.connect(this.connectionString);\n                this.botStateCollection = await this.mongoDb.collection(this.collectionName);\n                this.botStateCollection.createIndex({ userId: 1 });\n            } catch (e) {\n                // console.log(`Error initializing MongoDB: ${e.message}`, e);\n                this.close();\n                this.initializePromise = null;\n            }\n        }\n    }\n\n    // Close the connection to the database\n    private close(): void {\n        this.botStateCollection = null;\n        if (this.mongoDb) {\n            this.mongoDb.close();\n            this.mongoDb = null;\n        }\n    }\n\n    // Get id for user data documents\n    private getUserDataId(context: builder.IBotStorageContext): string {\n        assert(context.userId);\n        return `user:${context.userId}`;\n    }\n\n    // Get id for conversation data documents\n    private getConversationDataId(context: builder.IBotStorageContext): string {\n        assert(context.conversationId);\n        return `conversation:${context.conversationId}`;\n    }\n\n    // Get id for conversation data documents\n    private getPrivateConversationDataId(context: builder.IBotStorageContext): string {\n        assert(context.conversationId && context.userId);\n        return `conversation:${context.conversationId}/user:${context.userId}`;\n    }\n}\n"],"sourceRoot":"/app/build"}