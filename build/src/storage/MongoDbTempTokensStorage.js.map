{"version":3,"sources":["../src/storage/MongoDbTempTokensStorage.ts"],"names":[],"mappings":"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","file":"MongoDbTempTokensStorage.js","sourcesContent":["// import * as assert from \"assert\";\nimport * as mongodb from \"mongodb\";\n// import { IBotChannelStorageContext, IBotChannelStorageData, IBotChannelStorage } from \"./BotChannelStorage\";\nimport * as config from \"config\";\n\n// tslint:disable-next-line:variable-name\nexport interface TempTokensEntry {\n    _id: string;\n    token: string;\n    refreshToken: string;\n};\n\n/** Replacable storage system used by UniversalBot. */\nexport class MongoDbTempTokensStorage {\n\n    // private initializePromise: Promise<void>;\n    private mongoDb: mongodb.Db;\n    private tempTokensCollection: mongodb.Collection;\n\n    public static async createConnection(): Promise<MongoDbTempTokensStorage> {\n        let collectionName = config.get(\"mongoDb.tempTokensCollection\");\n        let connectionString = config.get(\"mongoDb.connectionString\");\n        let resultMongoDbTempTokensStorage = new MongoDbTempTokensStorage(collectionName, connectionString);\n        await resultMongoDbTempTokensStorage.initialize();\n        return resultMongoDbTempTokensStorage;\n    }\n\n    constructor(\n        private collectionName: string,\n        private connectionString: string) {\n    }\n\n    // Reads in data from storage\n    public async getTempTokensAsync(_id: string): Promise<TempTokensEntry> {\n        // if (context.channelId) {\n            // await this.initialize();\n            if (!this.tempTokensCollection) {\n                return ({} as any);\n            }\n\n            let filter = { \"_id\": _id };\n            let tempTokensEntry = await this.tempTokensCollection.findOne(filter);\n            // await this.close();\n            if (tempTokensEntry) {\n                return tempTokensEntry;\n            } else {\n                return ({} as any);\n            }\n        // } else {\n        //     return { };\n        // }\n    }\n\n    // Writes out data from storage\n    public async saveTempTokensAsync(tempTokensEntry: TempTokensEntry): Promise<void> {\n        // if (context.teamId && context.channelId && data.channelData) {\n            // await this.initialize();\n            if (!this.tempTokensCollection) {\n                return;\n            }\n\n            let filter = { \"_id\": tempTokensEntry._id };\n            // let document = {\n            //     teamId: context.teamId,\n            //     channelId: context.channelId,\n            //     data: data.channelData,\n            // };\n            // let document = {\n            //     token: tokens.token,\n            //     refreshToken: tokens.refreshToken,\n            // };\n            await this.tempTokensCollection.updateOne(filter, tempTokensEntry, { upsert: true });\n            // await this.close();\n        // }\n    }\n\n    // Writes out data from storage\n    public async deleteTempTokensAsync(_id: string): Promise<void> {\n        // if (context.teamId && context.channelId && data.channelData) {\n            // await this.initialize();\n            if (!this.tempTokensCollection) {\n                return;\n            }\n\n            let filter = { \"_id\": _id };\n            // let document = {\n            //     teamId: context.teamId,\n            //     channelId: context.channelId,\n            //     data: data.channelData,\n            // };\n            // let document = {\n            //     token: tokens.token,\n            //     refreshToken: tokens.refreshToken,\n            // };\n            await this.tempTokensCollection.deleteMany(filter);\n            // await this.close();\n        // }\n    }\n\n    // Close the connection to the database\n    public async close(): Promise<void> {\n        // this.initializePromise = null;\n        this.tempTokensCollection = null;\n        if (this.mongoDb) {\n            await this.mongoDb.close();\n            this.mongoDb = null;\n        }\n    }\n\n    // Returns a promise that is resolved when this instance is initialized\n    // private initialize(): Promise<void> {\n    //     if (!this.initializePromise) {\n    //         this.initializePromise = this.initializeWorker();\n    //     }\n    //     return this.initializePromise;\n    // }\n\n    // Initialize this instance\n    private async initialize(): Promise<void> {\n        if (!this.mongoDb) {\n            try {\n                this.mongoDb = await mongodb.MongoClient.connect(this.connectionString);\n                this.tempTokensCollection = await this.mongoDb.collection(this.collectionName);\n            } catch (e) {\n                // console.log(e.toString());\n                await this.close();\n                // this.initializePromise = null;\n            }\n        }\n    }\n\n    // // Get id for channel data documents\n    // private getChannelDataId(context: IBotChannelStorageContext): string {\n    //     assert(context.channelId);\n    //     return `channel:${context.channelId}`;\n    // }\n}\n"],"sourceRoot":"/app/build"}