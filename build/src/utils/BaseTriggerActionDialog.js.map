{"version":3,"sources":["../src/utils/BaseTriggerActionDialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6CAA0C;AAC1C,2CAAwC;AAExC,6BAA8C,SAAQ,uBAAU;IAE5D,YACc,QAAgB;QAE1B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAFN,aAAQ,GAAR,QAAQ,CAAQ;IAG9B,CAAC;IAES,+BAA+B,CACrC,GAAyB,EACzB,QAAgB,EAChB,KAA4C,EAC5C,MAAqE,EACrE,eAAqB;QACjB,IAAI,aAAa,GAAG,IAAI,KAAK,EAAgC,CAAC;QAC9D,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjG,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;YACvC,IAAI,eAAe,EAAE;gBACjB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;aAC1C;iBAAM;gBACH,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;aAC7B;YACD,IAAI,CAAC,eAAe,CAAC,GAAG,GAAG,GAAG,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAE,MAAyC,CAAC,CAAC;SACpF;aAAM;YACH,aAAa,CAAC,IAAI,CAAE,MAAuC,CAAC,CAAC;SAChE;QACF,6BAA6B;QAC5B,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC;aAC9B,aAAa,CAAC;YACX,OAAO,EAAE,KAAK;SACjB,CAAC,CAAC;IACf,CAAC;IAEa,oBAAoB,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YACpJ,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,qBAAS,CAAC,yBAAyB,EAAE;gBAC5D,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;aACnE;YACD,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC;KAAA;CACJ;AA3CD,0DA2CC","file":"BaseTriggerActionDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { BaseDialog } from \"./BaseDialog\";\nimport { DialogIds } from \"./DialogIds\";\n\nexport abstract class BaseTriggerActionDialog extends BaseDialog {\n\n    constructor (\n        protected dialogId: string,\n    ) {\n        super(dialogId);\n    }\n\n    protected addDialogWithTriggerActionToBot(\n        bot: builder.UniversalBot,\n        dialogId: string,\n        match: RegExp | RegExp[] | string | string[],\n        action: builder.IDialogWaterfallStep | builder.IDialogWaterfallStep[],\n        constructorArgs?: any): void {\n            let newActionList = new Array<builder.IDialogWaterfallStep>();\n            newActionList.push((session, args, next) => { this.setDialogIdAsCurrent(session, args, next); });\n            newActionList.push((session, args, next) => {\n                if (constructorArgs) {\n                    args.constructorArgs = constructorArgs;\n                } else {\n                    args.constructorArgs = {};\n                }\n                args.constructorArgs.bot = bot;\n                next(args);\n            });\n            if (Array.isArray(action)) {\n                newActionList = newActionList.concat((action as builder.IDialogWaterfallStep[]));\n            } else {\n                newActionList.push((action as builder.IDialogWaterfallStep));\n            }\n           //console.log(newActionList);\n            bot.dialog(dialogId, newActionList)\n                .triggerAction({\n                    matches: match,\n                });\n    }\n\n    private async setDialogIdAsCurrent(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        if (this.getDialogId() !== DialogIds.GetLastDialogUsedDialogId) {\n            session.conversationData.currentDialogName = this.getDialogId();\n        }\n        next(args);\n    }\n}\n"],"sourceRoot":"/app/build"}