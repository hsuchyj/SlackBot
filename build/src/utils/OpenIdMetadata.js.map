{"version":3,"sources":["../src/utils/OpenIdMetadata.ts"],"names":[],"mappings":"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","file":"OpenIdMetadata.js","sourcesContent":["// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport * as request from \"request\";\nlet getPem = require(\"rsa-pem-from-mod-exp\");\nlet base64url = require(\"base64url\");\n\n// Handles fetching and caching OpenId key metadata\nexport class OpenIdMetadata {\n    private url: string;\n    // tslint:disable-next-line:typedef\n    private lastUpdated = 0;\n    private keys: IKey[];\n\n    constructor(url: string) {\n        this.url = url;\n    }\n\n    // Get the key data for the given key id\n    public getKey(keyId: string, cb: (key: IOpenIdMetadataKey) => void): void {\n        // If keys are more than 5 days old, refresh them\n        let now = new Date().getTime();\n        if (this.lastUpdated < (now - 1000 * 60 * 60 * 24 * 5)) {\n            this.refreshCache((err) => {\n                if (err) {\n                    console.error(\"Error retrieving OpenId metadata at \" + this.url + \", error: \" + err.toString());\n                    // fall through and return cached key on error\n                }\n\n                // Search the cache even if we failed to refresh\n                let key = this.findKey(keyId);\n                cb(key);\n            });\n        } else {\n            // Otherwise read from cache\n            let key = this.findKey(keyId);\n            cb(key);\n        }\n    }\n\n    private refreshCache(cb: (err: Error) => void): void {\n        let options: request.Options = {\n            method: \"GET\",\n            url: this.url,\n            json: true,\n        };\n\n        request(options, (err, response, body) => {\n            if (!err && (response.statusCode >= 400 || !body)) {\n                err = new Error(\"Failed to load openID config: \" + response.statusCode);\n            }\n\n            if (err) {\n                cb(err);\n            } else {\n                let openIdConfig = body as IOpenIdConfig;\n\n                // tslint:disable-next-line:no-shadowed-variable\n                let options: request.Options = {\n                    method: \"GET\",\n                    url: openIdConfig.jwks_uri,\n                    json: true,\n                };\n\n                // tslint:disable-next-line:no-shadowed-variable\n                request(options, (err, response, body) => {\n                    if (!err && (response.statusCode >= 400 || !body)) {\n                        err = new Error(\"Failed to load Keys: \" + response.statusCode);\n                    }\n\n                    if (!err) {\n                        this.lastUpdated = new Date().getTime();\n                        this.keys = body.keys as IKey[];\n                    }\n\n                    cb(err);\n                });\n            }\n        });\n    }\n\n    private findKey(keyId: string): IOpenIdMetadataKey {\n        if (!this.keys) {\n            return null;\n        }\n\n        for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].kid === keyId) {\n                let key = this.keys[i];\n\n                if (!key.n || !key.e) {\n                    // Return null for non-RSA keys\n                    return null;\n                }\n\n                let modulus = base64url.toBase64(key.n);\n                let exponent = key.e;\n\n                return { key: getPem(modulus, exponent), endorsements: key.endorsements } as IOpenIdMetadataKey;\n            }\n        }\n\n        return null;\n    }\n}\n\ninterface IOpenIdConfig {\n    issuer: string;\n    authorization_endpoint: string;\n    jwks_uri: string;\n    id_token_signing_alg_values_supported: string[];\n    token_endpoint_auth_methods_supported: string[];\n}\n\ninterface IKey {\n    kty: string;\n    use: string;\n    kid: string;\n    x5t: string;\n    n: string;\n    e: string;\n    x5c: string[];\n    endorsements?: string[];\n}\n\nexport interface IOpenIdMetadataKey {\n    key: string;\n    endorsements?: string[];\n}\n"],"sourceRoot":"/app/build"}