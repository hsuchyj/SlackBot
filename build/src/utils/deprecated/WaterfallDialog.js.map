{"version":3,"sources":["../src/utils/deprecated/WaterfallDialog.ts"],"names":[],"mappings":";;;;;;;;;;AACA,6CAA0C;AAE1C,qBAAsC,SAAQ,uBAAU;IACpD,YACc,QAAgB,EAChB,KAA4C,EAC5C,MAAqE;QAE/E,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAJV,aAAQ,GAAR,QAAQ,CAAQ;QAChB,UAAK,GAAL,KAAK,CAAuC;QAC5C,WAAM,GAAN,MAAM,CAA+D;QAI/E,IAAI,aAAa,GAAG,EAAE,CAAC;QACvB,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjG,aAAa,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE;YACvC,gDAAgD;YAChD,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnF,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC,CAAC,CAAC;QACH,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,aAAa,GAAG,aAAa,CAAC,MAAM,CAAE,MAAyC,CAAC,CAAC;SACpF;aAAM;YACH,aAAa,CAAC,IAAI,CAAE,MAAuC,CAAC,CAAC;SAChE;QACD,IAAI,CAAC,MAAM,GAAG,aAAa,CAAC;IAChC,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,SAAS;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,kBAAkB,CAAC,YAAkC;QACxD,IAAI,UAAU,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,UAAU,KAAK,IAAI,EAAE;YACrB,OAAO;SACV;QACD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YAC3B,YAAY,CAAC,UAAU,CAAE,UAAkC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;SAClF;aAAM;YACH,YAAY,CAAC,OAAO,CAAE,UAA8B,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;SAC3E;IACL,CAAC;IAES,QAAQ,CAAC,OAAwB,EAAE,IAAS,EAAE,IAAiD;QACrG,OAAO,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,IAAI,CAAC,CAAC;IACf,CAAC;IAEa,oBAAoB,CAAC,OAAwB,EAAE,IAAuC,EAAE,IAAkD;;YACpJ,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3D,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC;KAAA;CACJ;AArDD,0CAqDC","file":"WaterfallDialog.js","sourcesContent":["import * as builder from \"botbuilder\";\nimport { BaseDialog } from \"./BaseDialog\";\n\nexport abstract class WaterfallDialog extends BaseDialog {\n    constructor(\n        protected dialogId: string,\n        protected match: RegExp | RegExp[] | string | string[],\n        protected action: builder.IDialogWaterfallStep | builder.IDialogWaterfallStep[],\n    ) {\n        super(dialogId, {});\n\n        let newActionList = [];\n        newActionList.push((session, args, next) => { this.setDialogIdAsCurrent(session, args, next); });\n        newActionList.push((session, args, next) => {\n            // tslint:disable-next-line:no-shadowed-variable\n            this.onDefault((session, args, next) => { this._onDefault(session, args, next); });\n            next(args);\n        });\n        if (Array.isArray(action)) {\n            newActionList = newActionList.concat((action as builder.IDialogWaterfallStep[]));\n        } else {\n            newActionList.push((action as builder.IDialogWaterfallStep));\n        }\n        this.action = newActionList;\n    }\n\n    public getMatch(): RegExp | RegExp[] | string | string[] {\n        return this.match;\n    }\n\n    public getAction(): builder.IDialogWaterfallStep | builder.IDialogWaterfallStep[] {\n        return this.action;\n    }\n\n    public addMatchesToDialog(parentDialog: builder.IntentDialog): void {\n        let matchEntry = this.getMatch();\n        if (matchEntry === null) {\n            return;\n        }\n        if (Array.isArray(matchEntry)) {\n            parentDialog.matchesAny((matchEntry as RegExp[] | string[]), this.getAction());\n        } else {\n            parentDialog.matches((matchEntry as string | RegExp), this.getAction());\n        }\n    }\n\n    protected _onBegin(session: builder.Session, args: any, next: (args?: builder.IDialogResult<any>) => void): void {\n        session.userData.args = args;\n        this.onDefault(this.getAction());\n        next(args);\n    }\n\n    private async setDialogIdAsCurrent(session: builder.Session, args?: any | builder.IDialogResult<any>, next?: (args?: builder.IDialogResult<any>) => void): Promise<void> {\n        session.conversationData.currentDialogName = this.dialogId;\n        next(args);\n    }\n}\n"],"sourceRoot":"/app/build"}